<section class="Post" data-icon="$sim">
<h2 class="Collapse" id="Caption">Graph</h2>
<div class="Collapse Expand">
<p class="Center"><svg class="Graph"></svg></p>
<!-- <p class="Center"><svg id="Test"></svg></p> -->
</div>
</section>

<script type="text/javascript" data-init="shm">

/***

data --> {
    Two of [T, A, vmax, amax],
    Optional [plot, ms, fix, tFix, unit, dy]
}

***/


loadFeed.test = (data) => {
    console.log(data);
    $("#Test").attr("data-svg2", 'p20/shm/img/shm.js#shm#[2,[0.5,0.1,1],[2,0.5,"cm",1]]');
    SVG2.load();
}

loadFeed.shm = () => {
    let data = decodeURIComponent(location.search.substr(1));
    data = JSON.parse(data);
    // loadFeed.test(data);
    $("svg.Graph").attr({width: 640, height: 480, "data-aspect": "4/3"});
    let pi2 = 2 * pi;
    let [T, A, v, a] = [data.T, data.A, data.vmax, data.amax];
    if (T == null)
        data.T = T = A == null ? pi2 * v / a : (v == null ? pi2 * root(A/a) : pi2 * A / v);
    if (A == null) data.A = A = a == null ? v * T / pi2 : a * sq(T / pi2);
    if (v == null) data.vmax = pi2 * A / T;
    if (a == null) data.amax = sq(pi2 / T) * A;
    if (data.dt == null) data.dt = T / 4;
    loadFeed.shm.draw(data, ["x", "v", "a"].indexOf(data.plot));
}

loadFeed.shm.draw = (data, mode) => {
    console.log(data);
    if (!mode || mode < 0) mode = 0;
    let [T, A, v, a, dt] = [data.T, data.A, data.vmax, data.amax, data.dt];
    if (data.ms) {
        T *= 1000;
        dt *= 1000;
    }
    let ymax = [A, v, a][mode];
    let dy = data.dy ? data.dy : ymax / 4;

    let svg = applet.graph("svg.Graph", {
        grid: [[-dt, 8 * dt, dt], [-5 * dy, 5 * dy, dy], 1],
        margin: [0.04, 0.04, 0.03, 0.03],
    });
    svg.axis({
        x: [-dt, 8 * dt, dt],
        title: {text: `Time / ${data.ms ? "ms" : "s"}`, position: [7.8 * dt, 0.3 * dy]},
        ticks: {length: "8", interval: dt, fixed: (data.tFix ? data.tFix : 1), offset: [0, "-24"], omitZero: 1},
    });
    let title = ["Position", "Velocity", "Acceleration"][mode];
    $("#Caption").html(`${title} vs. Time`);
    let unit = data.unit;
    if (!unit) unit = "m";
    if (mode) unit = `(${unit}/s${mode == 2 ? "^2" : ""})`
    svg.axis({
        y: [-5 * dy, 5 * dy, dy],
        title: {text: `${title} / ${unit}`, position: [0.3 * dt, 4.8 * dy]},
        ticks: {length: "8", interval: dy, fixed: (data.fix == null ? 1 : data.fix), offset: ["-16", 0], omitZero: 1},
    });
    svg.$.find(".TitleX, .TitleY").addClass("End");
    let f = mode == 0 ? (t) => A * sin(360 * t / T) : (mode == 1 ? (t) => v * cos(360 * t / T) : (t) => -a * sin(360 * t / T));
    svg.locus(f, [-dt, 8 * dt], 0, 0).css({"stroke-opacity": 0.6});
    svg.final();

}

loadFeed.data = {
    title: `SHM Graphs`,
    up: "p20/home",
}

</script>