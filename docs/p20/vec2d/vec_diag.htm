<style type="text/css">

textarea, #CalcTable table {
    width: 603px;
    max-width: calc(100% - 8px);
}

</style>

<section class="Post" id="Tip2Tail" data-icon="vec.svg">
<h2 class="Collapse">Tip-to-Tail Diagram
    <span class="Action"><img alt="Bookmark" title="Reload page with custom URL" data-src="bookmark.svg" onclick="location.href=loadFeed.init.url()"/></span>
</h2><div class="Center Collapse Expand">
<p><input type="checkbox" id="Shift" onclick="loadFeed.init.draw()"/> <label for="Shift">Shift</label></p>
<p><textarea rows="4" onblur="loadFeed.init.draw()">[3, 5], @(6, -60)</textarea></p>
<p>The diagram units are <span id="Units"></span>.</p>
<div id="Output"></div>
</div></section>

<section class="Post" id="Calc" data-icon="calc.svg">
<h2 class="Collapse">Calculations</h2><div class="Center Collapse Expand">
<div id="CalcTable"></div>
<p class="Left">When calculating <span class="TeX">\theta</span> using the <span class="TeX">\tan^{-1}</span> formula,
    you must add or subtract 180° to the result when the <span class="NoWrap"><span class="TeX">x</span>-component</span> is negative.
    (Ask your Math teacher about the “CAST Rule”!)</p>
</div>
</section>

<script type="text/javascript" data-init="init">

loadFeed.init = () => {
/* Initialize drawing using data from location.search */
    let data;
    try {data = JSON.parse(decodeURIComponent(location.search.substring(1)))}
    catch(err) {data = {}}
    loadFeed.init.symbol = data.symbol ? data.symbol : "v";
    loadFeed.init.units = data.unit ? data.unit : "m/s";
    $("#Shift")[0].checked = data.shift == null ? false : true;
    if (data.v) $("textarea").val(data.v);
    loadFeed.init.draw();
}

loadFeed.init.url = () => {
/* Make a custom URL for the current drawing */
    let data = {v: $("textarea").val(), symbol: loadFeed.init.symbol, unit: loadFeed.init.units};
    if (data.symbol == "v") delete data.symbol;
    if (data.unit == "m/s") delete data.unit;
    if ($("#Shift")[0].checked) data.shift = 1;
    return `./?${JSON.stringify(data)}#p20/vec2d/vec_diag`;
}

loadFeed.init.viewport = (vecs) => {
/* Calculate optimal scale and center */
    let vp = xy_limits(...vecs);
    let size = Math.max(...vp.size);
    let scale = size / 16;
    let n = 0;
    while (scale < 0.5) {scale *= 10; n--}
    while (scale >= 5) {scale /= 10; n++}

    let scales = [0.5, 1, 1.5, 2, 2.5, 3, 5];
    let s = 0.5;
    for (let i=0;i<scales.length-1;i++)
        if (scale > scales[i]) s = scales[i+1];
    if (s == 5) {s = 0.5; n++}
    scale = s;
    if (n == 1) {scale *= 10; n = 0}
    else if (n == -1) {scale /= 10; n = 0}
    else if (n == -2) {scale /= 100; n = 0}
    if (n) {
        loadFeed.init.viewport.n = n;
        let f = Math.pow(10, n);
        for (let i=0;i<vecs.length;i++) {
            vecs[i][0] /= f;
            vecs[i][1] /= f;
        }
    }
    let dig = `${2 * scale}`.split(".");
    dig = dig.length > 1 ? dig[1].length : 0;
    let c = new RArray(...vp.center).times(1/scale);
    let [cx, cy] = [Math.round(c[0]), Math.round(c[1])];
    let lrbt = [scale * (cx - 10), scale * (cx + 10), scale * (cy - 10), scale * (cy + 10)];
    return {grid: scale, lrbt: lrbt, n: n, dig: dig}
}

loadFeed.init.redraw = (vecs) => {
/* Redraw the vector diagram and remake the calculations table */
    // Replace previous drawing  with empty <svg> element
    let svg = document.createElementNS(SVG2.nsURI, "svg");
    $("#Output").html(svg);

    // Determine shift and viewport
    let shift = $("#Shift")[0].checked ? vecs[0] : null;
    let vp = loadFeed.init.viewport(vecs);
    let n = loadFeed.init.viewport.n;

    // Draw the vector diagram and print the units
    svg = SVG2.vec_diag(svg, shift ? vecs.slice(1) : vecs, {lrbt: vp.lrbt, scale: 30 / vp.grid, margin: 16,
        grid: vp.grid, cycle: 1, shift: shift, tick: "-8", label: [2 * vp.grid, vp.dig, "-12", "-20"]}
    );
    $(svg.$.find("g.Labels")[0]).find("text").css({"text-anchor": "end"});
    svg.vecs = vecs;
    $("#Units").html(`${n ? `10<sup>${n}</sup> ` : ""}${loadFeed.init.units}`);

    // Draw the calculations table
    let tbl = SVG2.vec_diag_table(loadFeed.init.symbol, vecs, 4, Math.pow(10, n));
    $("#CalcTable").html(tbl.addClass("Bottom"));
    let tr = tbl.find("tbody tr");
    if (shift) {
        $(tr[0]).remove();
        tr = tbl.find("tbody tr");
    }
    if (tr.length == 2) $(tr[1]).remove();
    tbl.find("thead tr").on("click", (e) => {
        let sym = prompt("Vector symbol?", "Δd");
        if (sym) {
            let unit = prompt("Units?", "N·s");
            if (unit) {
                loadFeed.init.symbol = sym;
                loadFeed.init.units = unit;
                loadFeed.init.redraw(svg.vecs);
            }
        }
    });
}

loadFeed.init.draw = () => {
/* Draw the diagram from <textarea> data */
    let vecs = eval(`[${$("textarea").val().replaceAll("@", "vec2d")}]`);
    loadFeed.init.viewport.n = 0;
    loadFeed.init.viewport(vecs);
    loadFeed.init.redraw(vecs);
}

loadFeed.init.randomize = (n) => {
/* Generate random vectors for testing */
    if (!n) n = 2;
    let s = "";
    let x = randint(-3, 4);
    while (n--) {
        let a = randint(0, 359);
        s += `,@(${Math.random().toFixed(4)}e${x},${a})`;
    }
    $("textarea").val(s.slice(1)).trigger("blur");
}

loadFeed.data = {
    title: `2D Vector Diagrams`,
}
    
</script>
