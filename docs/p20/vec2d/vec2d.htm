<style type="text/css">

#ShowHide {
    border-collapse: separate;
    border-spacing: 0.5em;
    margin-bottom: 1em;
}

#ShowHide td {
    min-width: 1em;
    width: 1.5em;
    height: 1.5em;
    cursor: pointer;
}

#ShowHide td:nth-child(1) {background-color: #ff00009a}
#ShowHide td:nth-child(2) {background-color: #ffc0c09a}
#ShowHide td:nth-child(3) {background-color: #0065fe9a}
#ShowHide td:nth-child(4) {background-color: #c0c0ff9a}

.Component, .Res_Component {display: none}

#Addition {
    width: 720px;
    max-width: 100%;
}

#Addition th {
    width: 25%;
    font-weight: normal;
}

#Addition td {background-color: #ffe8e8}
#Addition th {background-color: #e8e8e8}
#Addition th p {margin: 0}
#Addition th:nth-child(odd) {background-color: #d8d8d8}

#Addition tr:not(#ResultantData):nth-child(even) td:nth-child(odd),
#Addition tr:not(#ResultantData):nth-child(odd) td:nth-child(even) {
    background-color: #ffd8d8;
}

#VectorInput {
    width: 472px;
    max-width: 100%;
}

#ErrorMsg {color: red}
p.Mid * {vertical-align: middle}

#ResultantData td:nth-child(even) {background-color: #d8d8ff}
#ResultantData td:nth-child(odd) {background-color: #e8e8ff}

</style>

<section class="Post" data-icon="vec.svg">
<h2 class="Collapse">“Tip-to-Tail” Diagram
    <span class="Action"><img alt="Bookmark" title="Reload page with custom URL" data-src="bookmark.svg" onclick="loadFeed.sim.bookmark(event)"/></span>
</h2>
<div class="Collapse Expand Center">

<table id="ShowHide"><tr>
    <td title="Show/Hide Vector Addends"></td>
    <td title="Show/Hide Addend Components"></td>
    <td title="Show/Hide Resultant Vector"></td>
    <td title="Show/Hide Resultant Components"></td>
</tr></table>

<p class="Mid"><input type="checkbox" id="Shift"/>&nbsp;<label for="Shift">Shift</label></p>
<p><textarea id="VectorInput" rows="3" placeholder="Enter one or more 2D vectors"></textarea></p>
<p id="ErrorMsg"></p>

<p class="Center"><svg class="VDiag" data-aspect="1" width="482" height="482"></svg></p>

</div>
</section>

<section class="Post" data-icon="calc.svg">
<h2 class="Collapse">Calculations</h2>
<div class="Collapse Center Expand">
<p class="Center">Vectors below are expressed in units of <span id="Units"></span>.</p>
<table id="Addition">
    <thead title="Click to change variable and units" onclick=loadFeed.sim.prompt()><tr>
        <th>&nbsp;</th>
        <th>&nbsp;</th>
        <th>&nbsp;</th>
        <th>&nbsp;</th>
    </tr>
    <tr>
        <th>&nbsp;</th>
        <th>&nbsp;</th>
        <th>&nbsp;</th>
        <th>&nbsp;</th>
    </tr></thead>
    <tbody></tbody>
</table>
<p class="Left">When calculating <span class="TeX">\theta</span> using the <span class="TeX">\tan^{-1}</span> formula,
    you must add or subtract 180° to the result when the <span class="NoWrap"><span class="TeX">x</span>-component</span> is negative.
    (Ask your Math teacher about the “CAST Rule”!)</p>
</div></section>

<script type="text/javascript" data-init="sim">

loadFeed.sim = () => {
    let data = decodeURIComponent(location.search.substr(1));
    if (data) data = JSON.parse(data);
    else data = {};
    data = Object.assign({
        // unit, unitXY, shift, quadrant
        scaleExp: 0,
        symbol: "v",
        square: [5, -1],
        corner: [-1.5, -3.5],
        vectors: [[3, 5], {mag:8, dir:-60}],
    }, data);
    $("#Shift")[0].checked = data.shift != null;
    let tmp = JSON.stringify(data.vectors);
    tmp = tmp.substr(1, tmp.length - 2);
    if (data.shift) tmp = JSON.stringify(data.shift) + "," + tmp;    
    $("#VectorInput").val(tmp.replaceAll('"dir":', '').replaceAll('}', ')').replaceAll('{"mag":', '@(').replaceAll(',', ", "));
    loadFeed.sim.draw(data);
    console.log(_);

    $("#ShowHide td").on("click", (ev) => {
        let e = ev.currentTarget;
        let i = $(e).parent().find("td").index(e);
        let v = [".Vector", ".Component", ".Resultant", ".Res_Component"][i];
        $(v).fadeToggle();
    });

    $("svg.VDiag").on("click", (ev) => {
        let svg = ev.currentTarget.graphic;
        let xy = svg.eventCoords(ev).coords;
        if (ev.altKey) loadFeed.sim.recenter(xy)
        else console.log(xy);
    }).on("wheel", (ev) => {
        if (ev.altKey) {
            let svg = ev.currentTarget.graphic;
            loadFeed.sim.zoom(_, ev.originalEvent.deltaY < 0, svg.eventCoords(ev).coords, 1);
            return false;
        }
    });

    $("#VectorInput").on("blur", loadFeed.sim.vecInput);
    $("#Shift").on("change", loadFeed.sim.vecInput);
}

loadFeed.sim.bookmark = (ev) => {
    let param = Object.assign({}, _);
    if (param.symbol == "v") delete param.symbol;
    if (param.quadrant == 1) delete param.quadrant;
    if (!param.scaleExp) delete param.scaleExp;
    location.href = `/?${JSON.stringify(param)}#p20/vec2d/vec2d`;
}

loadFeed.sim.vecInput = (ev) => {
    try {
        let s = $("#VectorInput").val();
        s = s.replaceAll("@", "polar");
        let polar = (r,a) => {return {mag:r, dir:a}};
        let data = Object.assign({}, _);
        let vecs = data.vectors = eval(`[${s}]`);
        delete data.shift;
        let shift = $("#Shift")[0].checked;
        if (shift && vecs.length < 2 || vecs.length < 1) throw("Invalid input!");
        loadFeed.sim.autoScale(data, shift);
    } catch(err) {
        console.log(err);
        $("#ErrorMsg").html(err).show();
    }
}

loadFeed.sim.scaleVals = [1, 1.5, 2, 3, 4, 5, 7.5];

loadFeed.sim.autoScale = (data, shift) => {
    let vecs = loadFeed.sim.rvecs(data.vectors, 1);
    let tip = new RArray(0, 0);
    let [x1, y1, x2, y2] = [0, 0, 0, 0];
    for (let v of vecs) {
        let [x, y] = tip = tip.plus(v);
        if (x < x1) x1 = x;
        if (x > x2) x2 = x;
        if (y < y1) y1 = y;
        if (y > y2) y2 = y;
    }
    let dx = Math.max(x2 - x1, y2 - y1);
    let n = Math.round(log(dx / 16, 10));
    data.scaleExp = n > 1 || n < -1 ? n : 0;
    dx /= Math.pow(10, data.scaleExp);
    n = n - data.scaleExp;
    data.square = [1, n];
    let s = (sq) => sq[0] * Math.pow(10, sq[1]);
    while (dx / s(data.square) < 15) loadFeed.sim.zoom(data, 1, [0, 0]);
    while (dx / s(data.square) > 16) loadFeed.sim.zoom(data, 0, [0, 0]);

    if (shift) data.shift = data.vectors.splice(0, 1)[0];
    _ = data;
    n = 2 * Math.pow(10, data.scaleExp);
    loadFeed.sim.recenter([(x1 + x2) / n, (y1 + y2) / n]);
}

loadFeed.sim.rvecs = (vecs, factor) => {
    let vectors = [];
    for (let v of vecs) {
        v = v instanceof Array ? new RArray(...v) : vec2d(v.mag, v.dir);
        if (v.length != 2 || isNaN(v[0]) || isNaN(v[1])) throw("Invalid input!");
        vectors.push(v.times(factor));
    }
    return vectors;
}
  
loadFeed.sim.draw = (data) => {
    $("#ErrorMsg").hide();
    let [s, n] = data.square;
    s *= Math.pow(10, n);
    let f = s >= 0.5 ? (data.square[0] == 7.5 && n ? 1 : 0) : -n;
    let [cx, cy] = data.corner;
    cx = s * Math.round(cx / s);
    cy = s * Math.round(cy / s);
    data.corner = [cx, cy];
    let factor = data.scaleExp ? Math.pow(10, -data.scaleExp) : 1;
    let vectors = loadFeed.sim.rvecs(data.vectors, factor);
    let shift = data.shift ? data.shift: [0, 0];
    if (!(shift instanceof Array)) shift = vec2d(shift.mag, shift.dir);
    shift = new RArray(...shift).times(factor);

    $("svg.VDiag").html("");
    let svg = applet.vecDiagram.diagram("svg.VDiag",
        vectors,
        {omitAxes: 1, shift: shift, component: 1, resultant: 1, res_component: 1},
        s, cx, cy
    );
    let grid = svg.$.find("g.Grid")[0].graphic;
    let attr = {interval: 2 * s, fixed: f, length: "8", omitZero: 1, offset: [0, "-18"]};
    svg.axis({x: [cx, cx + 20 * s], ticks: attr}, grid);
    attr.offset = ["-14", 0];
    svg.axis({y: [cy, cy + 20 * s], ticks: attr}, grid);
    svg.final();
    _ = data;
    loadFeed.sim.table(vectors);
    if (data.unit || data.scaleExp) {
        let t = data.scaleExp ? svg.sciNot({exp: data.scaleExp, unit: data.unit}, [0, 0], grid) :
            svg.text(data.unit, [0, 0], grid);
        t.css({"font-size": "24px"});
        if (data.unitXY) {
            t.position = data.unitXY;
            svg.update(0);
        }
        else {
            if (!data.quadrant) data.quadrant = 1;
            _.quadrant = data.quadrant ? data.quadrant : 1;
            loadFeed.sim.positionUnit(t, _.quadrant, [s, s]);
            t.$.on("click", (ev) => {
                if (ev.altKey) {
                    let t = ev.currentTarget.graphic;
                    _.quadrant += _.quadrant == 4 ? -3 : 1;
                    loadFeed.sim.positionUnit(t, _.quadrant, [s, s]);
                    t.svg.update(0);
                    return false;
                }
            });
        }
        let html = (data.scaleExp ? `10<sup>${data.scaleExp}</sup> ` : "") + (data.unit ? data.unit : "");
        $("#Units").html(html.trim()).closest("p").show();
    }
    else $("#Units").closest("p").hide();
}

loadFeed.sim.positionUnit = (t, q, offset) => {
    let svg = t.svg;
    let [sx, sy] = svg.scale;
    let [w, h] = svg.size;
    let num = (x, s) => typeof(x) == "string" ? parseFloat(x) / s: x;
    offset = new RArray(num(offset[0], sx), -num(offset[1], sy));
    let [x1, y1] = svg.p2a(1, 1).plus(offset);
    let [x2, y2] = svg.p2a(w-1, h-1).minus(offset);
    let x = x1, y = y1;
    if (q < 3) t.css({"dominant-baseline" : "hanging"});
    else {
        t.css({"dominant-baseline" : "auto"});
        y = y2;
    }
    if ((q - 1) % 3) t.css({"text-anchor" : "start"});
    else {
        t.css({"text-anchor" : "end"});
        x = x2;
    }
    t.position = [x, y];
    svg.update(0);
}

loadFeed.sim.recenter = (xy) => {
    let [s, n] = _.square;
    s *= Math.pow(10, n);
    _.corner = [xy[0] - 10 * s, xy[1] - 10 * s];
    loadFeed.sim.draw(_);
}

loadFeed.sim.zoom = (data, zoomIn, xy, draw) => {
    let [s, n] = data.square;
    let scale = loadFeed.sim.scaleVals;
    let i = scale.indexOf(s) + (zoomIn ? -1 : 1);
    if (i < 0) {i = scale.length - 1; n -= 1}
    else if (i == scale.length) {i = 0; n += 1}
    data.square = [scale[i], n];
    if (draw) {
        let svg = $("svg.VDiag")[0].graphic;
        let xyp = svg.a2p(...xy);
        s = 20 * scale[i] * Math.pow(10, n) / 480;
        data.corner = [xy[0] - xyp[0] * s, xy[1] - (480 - xyp[1]) * s];
        loadFeed.sim.draw(data);
    }
}

loadFeed.sim.table = (rvecs) => {

    let tr = (v) => {
        let a = v.dir();
        if (a < -90) a += 360;
        return $("<tr>")
            .append($("<td>").html(v[0].toPrecision(4)))
            .append($("<td>").html(v[1].toPrecision(4)))
            .append($("<td>").html(v.mag().toPrecision(4)))
            .append($("<td>").html(a.toFixed(1) + '°'));        
    };
    let tbl = $("#Addition tbody").html("");
    let res = new RArray(0, 0);
    for (let v of rvecs) {
        tbl.append(tr(v));
        res = res.plus(v);
    }
    if (rvecs.length > 1)
        tbl.append(tr(res).attr({id: "ResultantData"}));

    let sym = _.symbol;
    if (sym) {
        sym = sym.charAt(0) == "Δ" ? `\\Delta\\vec{\\bf ${sym.substr(1)}}` : `\\vec{\\bf ${sym}}`;
        tbl = $("#Addition thead th").removeClass("KaTeX").addClass("TeX").html("");
        $(tbl[0]).html(sym + "_x");
        $(tbl[1]).html(sym + "_y");
        $(tbl[2]).html(`|${sym}|`);
        $(tbl[3]).html("\\theta");
        $(tbl[4]).html(`|${sym}|\\cos\\theta`);
        $(tbl[5]).html(`|${sym}|\\sin\\theta`);
        $(tbl[6]).html(`\\sqrt{(${sym}_x)^2+(${sym}_y)^2}`);
        $(tbl[7]).removeClass("TeX").html(`<p class="TeX">\\tan^{-1}\\frac{${sym}_y}{${sym}_x}</p>`);
    }
    renderTeX();    
}

loadFeed.sim.prompt = () => {
    let s = prompt("Variable?", "Δd");
    let u = prompt("Unit?", _.unit);
    if (s) _.symbol = s;
    if (u != null) {
        u = u.split(";");
        _.unit = u[0];
        if (u.length > 1) _.scaleExp = parseInt(u[1]);
    }
    loadFeed.sim.draw(_);
}

loadFeed.data = {
    title: "2D Vector Diagrams",
    up: "p20/home",
}

</script>