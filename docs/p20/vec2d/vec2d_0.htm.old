<!-- © 2023-2024 by D.G. MacCarthy <sc8pr.py@gmail.com> -->

<style type="text/css">

#VectorInput {
    width: 472px;
    max-width: 100%;
}

#ErrorMsg {color: red}

#Action img {
    width: 1.5em;
    margin: 0.5em;
    cursor: pointer;
}

#ShowHide {
    border-collapse: separate;
    border-spacing: 0.5em;
    margin-bottom: 1em;
}

#ShowHide td {
    min-width: 1em;
    width: 1.5em;
    height: 1.5em;
    cursor: pointer;
}

#ShowHide td:nth-child(1) {background-color: #ff00009a}
#ShowHide td:nth-child(2) {background-color: #ffc0c09a}
#ShowHide td:nth-child(3) {background-color: #0065fe9a}
#ShowHide td:nth-child(4) {background-color: #c0c0ff9a}

#Addition {
    width: 720px;
    max-width: 100%;
}

#Addition th {
    width: 25%;
    font-weight: normal;
}

#Addition td {background-color: #ffe8e8}
#Addition th {background-color: #e8e8e8}
#Addition th p {margin: 0}
#Addition th:nth-child(odd) {background-color: #d8d8d8}

#Addition tr:not(#ResultantData):nth-child(even) td:nth-child(odd),
#Addition tr:not(#ResultantData):nth-child(odd) td:nth-child(even) {
    background-color: #ffd8d8;
}

#ResultantData td:nth-child(even) {background-color: #d8d8ff}
#ResultantData td:nth-child(odd) {background-color: #e8e8ff}

</style>

<section class="Post" data-icon="vec.svg">
<h2 class="Collapse">“Tip-to-Tail” Diagram
    <span class="Action"><img alt="Bookmark" title="Reload page with custom URL" data-src="bookmark.svg" onclick="location.href = applet.vecDiagram.url"/></span>
    <span class="Action"><img alt="Save" title="Download SVG image" data-src="$download" onclick="loadFeed.init.save()"/></span>
</h2>

<div class="Collapse Expand Center">

<table id="ShowHide"><tr>
    <td title="Show/Hide Vector Addends"></td>
    <td title="Show/Hide Addend Components"></td>
    <td title="Show/Hide Resultant Vector"></td>
    <td title="Show/Hide Resultant Components"></td>
</tr></table>

<p><textarea id="VectorInput" rows="3"></textarea></p>
<p id="ErrorMsg"></p>
<p><svg id="VectorDiagram" class="VDiag" data-aspect="1" width="480" height="480">
<style>

#VectorDiagram g.Grid text.TickLabelX {text-anchor: end}
#VectorDiagram g.Grid text:is(.Scale1, .Scale2, .Scale3, .Scale4) {
    text-anchor: end;
    dominant-baseline: hanging;
    font-size: 20px;
}

#VectorDiagram g.Grid text:is(.Scale2, .Scale3) {text-anchor: start}
#VectorDiagram g.Grid text:is(.Scale3, .Scale4) {dominant-baseline: auto}

</style>
</svg></p>
</div></section>

<section class="Post" data-icon="calc.svg">
<h2 class="Collapse">Calculations</h2>
<div class="Collapse Center">
<table id="Addition">
    <thead><tr>
        <th>&nbsp;</th>
        <th>&nbsp;</th>
        <th>&nbsp;</th>
        <th>&nbsp;</th>
    </tr>
    <tr>
        <th>&nbsp;</th>
        <th>&nbsp;</th>
        <th>&nbsp;</th>
        <th>&nbsp;</th>
    </tr></thead>
    <tbody></tbody>
</table>
<p class="Left">When calculating <span class="TeX">\theta</span> using the <span class="TeX">\tan^{-1}</span> formula,
    you must add or subtract 180° to the result when the <span class="NoWrap"><span class="TeX">x</span>-component</span> is negative.
    (Ask your Math teacher about the “CAST Rule”!)</p>
</div></section>

<section class="Post" data-icon="help">
<h2 class="Collapse">Help</h2>
<div class="Collapse">
    <p>Enter a list of 2D vectors separated by commas in the input area above the vector diagram. Press the <em>Enter</em> key or click outside the input area to redraw the vector diagram.</p>
    <ul>
        <li>Vectors can be entered in Cartesian (component) form using square brackets: <code class="NoWrap">[-4, 3]</code>.</li>
        <li>Enter polar vectors by typing the <code>@</code> symbol followed by the magnitude and direction (degress counterclockwise from the <span class="NoWrap"><span class="TeX">x</span>-axis</span>) in parentheses: <code class="NoWrap">@(5, 60)</code></li>
        <li>If you want the tail of the first vector plotted at a point other than the origin, add the “shift” to your vector list as in this example:
            <code class="NoWrap">{shift: [3, -2]}</code></li>
    </ul>
    <p>Click on the red and blue squares above the diagram to hide or show the vectors, the resultant vector, and their components.</p>
</div></section>

<script type="text/javascript">

applet.vecDiagram.init = () => {
    let fn = applet.vecDiagram;
    let v = qsArgs();
    fn.history = [];
    fn.sym = v.sym;
    fn.unit = v.u ? v.u : "";
    v = v.v;
    if (!v) v = '[-4, 3], @(5, 60), {shift: [3, -2]}'
    $("#VectorInput").attr({placeholder: "Enter one or more 2D vectors"}).html(v)
        .on("blur", fn.draw)
        .on("keydown", (ev) => {
            let key = ev.originalEvent.key;
            if (key == "Enter") {
                fn.draw();
                return false;
            }
            else {
                key = ["ArrowUp", "ArrowDown"].indexOf(key);
                let h = fn.history;
                if (key == 0 && h.current < h.length - 1) $("#VectorInput").val(h[++h.current]);
                else if (key == 1 && h.current >= 0) $("#VectorInput").val(h[--h.current]);
            }
        });
    $("#ShowHide td").on("click", (ev) => {
        let e = ev.currentTarget;
        let i = $(e).parent().find("td").index(e);
        let v = [".Vector", ".Component", ".Resultant", ".Res_Component"][i];
        $(v).fadeToggle();
    });
    fn.draw();
};

applet.vecDiagram.draw = () => {

    let getDec = (x, n) => {
        if (Math.abs(n) > 1) x /= Math.pow(10, n);
        let d = 3;
        x = x.toFixed(d).split(".")[1];
        for (let i=0;i<x.length;i++) if (x.charAt(i) == "0") d--;
        return n == -1? d - 1 : d;
    }

    let url = (qs) => {
        let locn = location.origin + location.pathname;
        let unit = applet.vecDiagram.unit;
        if (unit) unit = `u=${encodeURIComponent(unit)}&`;
        return `${locn}?${unit}v=${encodeURIComponent(qs)}#${loadFeed.current}`;
    }

    let table = (rvecs) => {
        let tr = (v) => {
            return $("<tr>")
                .append($("<td>").html(v[0].toPrecision(4)))
                .append($("<td>").html(v[1].toPrecision(4)))
                .append($("<td>").html(v.mag().toPrecision(4)))
                .append($("<td>").html(v.dir().toPrecision(4) + '°'));        
        };
        let tbl = $("#Addition tbody").html("");
        let res = new RArray(0, 0);
        for (let v of rvecs) {
            tbl.append(tr(v));
            res = res.plus(v);
        }
        if (rvecs.length > 1)
            tbl.append(tr(res).attr({id: "ResultantData"}));
    
        let sym = applet.vecDiagram.sym;
        if (!sym) sym = "v";
        if (sym) {
            sym = sym.charAt(0) == "Δ" ? `\\Delta\\vec{\\bf ${sym.substr(1)}}` : `\\vec{\\bf ${sym}}`;
            tbl = $("#Addition thead th").removeClass("KaTeX").addClass("TeX").html("");
            $(tbl[0]).html(sym + "_x");
            $(tbl[1]).html(sym + "_y");
            $(tbl[2]).html(`|${sym}|`);
            $(tbl[3]).html("\\theta");
            $(tbl[4]).html(`|${sym}|\\cos\\theta`);
            $(tbl[5]).html(`|${sym}|\\sin\\theta`);
            $(tbl[6]).html(`\\sqrt{(${sym}_x)^2+(${sym}_y)^2}`);
            $(tbl[7]).removeClass("TeX").html(`<p class="TeX">\\tan^{-1}\\frac{${sym}_y}{${sym}_x}</p>`);
            renderTeX();
        }
    }

    $("#ErrorMsg").hide();
    let err = "ValueError: vector must have exactly 2 components";
    try {
        let fn = applet.vecDiagram;

        // Parse input
        let text = $("#VectorInput").val();
        if (text.trim() == "" || text == fn.history[0]) return;
        $("#VectorInput").val("");
        let shift = [0, 0];
        let rvecs = [];
        let vectors = eval(`[${text.replaceAll('@', 'vec2d')}]`);
        for (let i=0;i<vectors.length;i++) {
            let v = vectors[i];
            if (!(v instanceof Array)) {
                if (v.shift) shift = new RArray(...v.shift);
                if (v.unit) fn.unit = v.unit;
            }
            else {
                if (v.length != 2) throw(err);
                rvecs.push(new RArray(...v));                
            }
        }

        // Draw vector diagram
        $("#VectorDiagram").html(loadFeed.init.style);
        let options = {shift: shift, component: 1, allowNoOrigin: 0, omitAxes:1};
        if (rvecs.length > 1) Object.assign(options, {resultant: 1, res_component: 1});
        let svg = applet.vecDiagram.diagram("#VectorDiagram", rvecs, options);
        let grid = svg.$.find(".Grid");
        svg.$.find(".Component, .Res_Component").hide();

        // Draw and label axes
        let si = svg.scaleInfo;
        let s = si.interval;
        let px = svg.pixelX;
        let count = 2 * s;
        let n = Math.floor(log(count, 10));
        if (count >= Math.pow(10, n + 1)) n++;
        let dec = getDec(count, n);
        let attr = {interval: count, length: 8 * px, omitZero: true, format: (x) => {return x.toFixed(dec)}};
        if (n == -1) attr.format = (x) => {return x.toFixed(dec+1)};            
        else if (Math.abs(n) > 1) attr.format = (x) => {return (x / Math.pow(10, n)).toFixed(dec)}
        svg.axis({x: si.x, ticks: Object.assign({offset: [0, -12 * px]}, attr)}, grid);
        svg.axis({y: si.y, ticks: Object.assign({offset: [-12 * px, 0]}, attr)}, grid);
        for (let e of grid.find(".TickLabelX")) e.graphic.theta = 90;

        // Draw units and scale
        let t = fn.unit;
        if (Math.abs(n) > 1) t = `<tspan>× 10</tspan><tspan class="Small" dy="-6">${n}</tspan><tspan dy="6"> ${t}</tspan>`
        let [w, h] = svg.size;
        let [x, y] = svg.a2p(0, 0);
        let q = [4, 1, 3, 2][(y > h / 2 ? 1 : 0) + (x > w / 2 ? 2 : 0)];
        x = q == 2 || q == 3 ? 4 : w - 4;
        y = q < 3 ? 12 : h - 8;
        t = svg.text(t.trim(), [0, 0], grid);
        t.addClass(`Scale${q}`).attr({x: x, y: y});

        // Finish up
        svg.final();
        fn.history.splice(0, 0, text);
        fn.history.current = -1;
        fn.url = url(text);

        // Write calculations table
        table(rvecs);
    } catch(err) {
        console.error(err);
        $("#ErrorMsg").html(err).fadeIn();
    }
};

loadFeed.init = () => {
    $.ajax({url: "/style/svg.css", success: (e) => {
        let s = document.createElementNS(SVG_Item.nsURI, "style");
        s = $(s).html(e)[0].innerHTML;
        let s0 = s.split("/* ");
        s = "";
        for (let i=0;i<s0.length;i++) {
            let si = s0[i];
            if (si.length) {
                let c = si.split(" ")[0];
                if (c == "SVG" || c == "VDiag") s += "/* " + si;
            }
        }
        loadFeed.init.css = s;
    }});
    loadFeed.init.style = $("#VectorDiagram style");
    applet.vecDiagram.init();
    console.log("applet.vecDiagram.interval = [1, ..., 10]");
}

loadFeed.init.save = () => {
    let svg = $($("#VectorDiagram")[0].outerHTML);
    svg.find("style").append(loadFeed.init.css);
    new BData(svg[0].outerHTML, `vec-${randomString(5)}.svg`).save();
}

loadFeed.data = {
    title: "2D Vector Diagrams",
    up: "p20/home",
}

</script>
