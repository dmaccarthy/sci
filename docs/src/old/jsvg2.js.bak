/***

Simple JavaScript animations rendered in an SVG element
(c) 2023

***/

class JSVG_Base {

    constructor() {
        this._theta = 0;
        this._xy = [0, 0];
        this._changed = true;
        this.sprite = false;
    }

    get theta() {return this._theta}
    get omega() {return this._omega}
    get vel() {return this._vel}
    get position() {return this._xy}

    set theta(t) {
        t %= 360;
        this._theta = t < 0 ? t + 360 : t;
        this._changed = true;
    }

    set position(xy) {
        this._xy = xy;
        this._changed = true;
    }

    set omega(a) {
        this._omega = a;
        this.sprite = true;
    }

    set vel(xy) {
        this._vel = xy;
        this.sprite = true;
    }

    config(attr) {
        this._changed = true;
        return Object.assign(this, attr);
    }

    get svg() {return this.$.closest("svg")[0].graphic}
    get parent() {return this.$.parent()[0].graphic}

    final() {
        let items = this.parent.items;
        let i = items.indexOf(this);
        items.splice(i, 1);
        this.update(0);
        return this; //.$;
    }

    default() {return this}

    kinematics(dt) {
        if (this._omega) this.theta += dt * this._omega;
        let v = this.vel;
        if (v) {
            let a = this.acc;
            this._changed = true;
            this._xy = this._xy.plus(v.times(dt));
        }
        return this;
    }

}


class JSVG_Graphic extends JSVG_Base {

    constructor(elem) {
        super();
        this.$ = $(elem);
        this.element = this.$[0];
        this.element.graphic = this;
    }

    attr(a) {
        this.$.attr(a);
        return this;
    }

    update(dt) {
        if (this.beforeupdate) this.beforeupdate.call(this);
        if (this.sprite) this.kinematics(dt);
        this.draw();
        if (this.onupdate) this.onupdate.call(this);
        return this;
    }

}


class JSVG_Canvas extends JSVG_Base {

    get size() {return this._size}
    
    set size(sz) {
        this._size = sz;
        this._changed = true;
    }

    constructor(elem) {
        super();
        this.items = [];
        this.$ = $(elem);
        this.element = this.$[0];
        this.element.graphic = this;
    }

    default() {
        let svg = this.svg;
        let sz = svg.size;
        this._size = [Math.abs(sz[0] / svg.scaleX), Math.abs(sz[1] / svg.scaleY)];
        return this;
    }

    create(tag) {
        let e = document.createElementNS(JSVG.svgNS, tag);
        $(e).appendTo(this.element) //.attr(attr ? attr : {});
        let cls = JSVG_Graphic.type[tag];
        let gr = new cls(e).config({class: cls, canvas: this});
        this.items.push(gr);
        return gr.default();
    }

    line(a, b, c) {
        let line = this.create("line");
        return c == null ? line.twoPoints(a, b) : line.pointSlope(a, b, c);
    }

    circle(r) {return this.create("circle").config({r: r})}
    ellipse(rx, ry) {return this.create("ellipse").config({rx: rx, ry: ry})}
    polygon(pts) {return this.create("polygon").config({points: pts})}

    text(txt) {
        let t = this.create("text");
        t.$.html(txt);
        return t;
    }

    update(dt) {
        JSVG_Graphic.prototype.update.call(this, dt);
        for (let item of this.items) item.update(dt, this);
    }

    draw() {
        if (this._changed) {
            let svg = this.svg;
            let h = svg.size;
            let w = h[0];
            h = h[1];
            let t = this._theta * svg.angleDir;
            let xy = this._xy;
            let x = xy[0] * svg.scaleX;
            let y = xy[1] * svg.scaleY;
            this.$.attr({
                transform: `translate(${x} ${y}) rotate(${t} ${w/2} ${h/2})`,
            });
            this._changed = false;
        }
    }

    grid(x, y) { // Draw horizontal and/or vertical grid lines
        let axes = [];
        let x0 = x[0]; let x1 = x[1]; let dx = x[2];
        let y0 = y[0]; let y1 = y[1]; let dy = y[2];
        if (dx) this._grid(axes, 0, x0, x1, dx, y0, y1);
        if (dy) this._grid(axes, 1, y0, y1, dy, x0, x1);
        for (let a of axes) this.$.append(a);
        return this;
    }

    _grid(axes, dim, x0, x1, dx, y0, y1) {
        let e = this.element;
        let ddx = dx / 1000;
        x1 += ddx;
        for (let x=x0; x<=x1; x+=dx) {
            let xy = dim ? [(y0 + y1) / 2, x] : [x, (y0 + y1) / 2];
            let line = this.create("line").pointSlope(xy, y1 - y0, dim ? 0 : Infinity);
            let cls = Math.abs(x) < ddx ? "Axis" : "Grid";
            line.$.addClass(cls);
            if (cls == "Axis") axes.push(line);
        }
    }

}


class JSVG extends JSVG_Canvas {

    get size() {return [parseFloat(this.$.attr("width")), parseFloat(this.$.attr("height"))]}
    get pixelX() {return 1 / Math.abs(this.scaleX)}
    get pixelY() {return 1 / Math.abs(this.scaleY)}

    find(sel) {return this.$.find(sel)[0].graphic}

    constructor(elem, l, r, b, t) {
        super(elem);
        let sz = this.size;
        this.$.attr({
            viewBox: `0 0 ${sz[0]} ${sz[1]}`,
            xmlns: JSVG.svgNS,
        });
        if (l) this.coords(l, r, b, t);

        // Animation
        this.playing = false;
        this.frameRate = 60;
        this.frameCount = 0;
        this.timeFactor = 1;
        this.time = 0;
    }

    coords(l, r, b, t) {
        let sz = this.size;
        if (l == null) {
            this.a2p = this.p2a = (x, y) => {return [x, y]}
            this.scaleX = this.scaleY = this.unit = this.angleDir = 1;            
        }
        else {
            if (r == null) {
                r = Math.abs(l);
                l = -r;
            }
            let scaleX = sz[0] / (r - l);
            let scaleY; 
            if (t == null) {
                scaleY = -scaleX;
                let dy = sz[1] / scaleX;
                if (b == null) b = -dy / 2;
                t = b + dy;
            }
            else scaleY = sz[1] / (b - t);
            Object.assign(this, {scaleX: scaleX, scaleY: scaleY, angleDir: (scaleX*scaleY<0 ? -1 : 1),
                unit: Math.sqrt((scaleX * scaleX + scaleY * scaleY) / 2)});
            this.a2p = (x, y) => {return [scaleX * (x - l), scaleY * (y - t)]};
            this.p2a = (x, y) => {return [l + x / scaleX, t + y / scaleY]};
        }
        return this;
    }

    play() {
        this.playing = true;
        return this.update();
    }

    pause() {
        clearTimeout(this._animate);
        this.playing = false;
        return this;
    }

    toggle() {return this.playing ? this.pause() : this.play()}

    convertImages() {
        let imgs = this.$.find("image");
        for (let img of imgs) Image.hrefToData(img);
    }
    
    bdata(filename) {return new BData(this.element, filename)} // Defined in util.js
    blob() {return this.bdata().blob}
    save(filename) {return this.bdata(filename).save()}
    open(filename) {return this.bdata(filename).open()}

    update(dt) {
        clearTimeout(this._animate);
        if (dt == null) {
            dt = this.timeFactor / this.frameRate;
            this.frameCount++;
            this.time += dt;
        }
        super.update(dt);
        if (this.playing) this._animate = setTimeout(() => {this.update()}, 1000 / this.frameRate);
        return this;
    }

    draw() {}

}

JSVG.svgNS = "http://www.w3.org/2000/svg";


class JSVG_Rect extends JSVG_Graphic {

    get size() {return this._size}
    
    set size(sz) {
        this._size = sz;
        this._changed = true;
    }

    default() {
        this._size = [1, 1];
        return this;
    }

    draw() {
        if (this._changed) {
            let svg = this.svg;
            let sz = this.size;
            let w = Math.abs(sz[0] * svg.scaleX);
            let h = Math.abs(sz[1] * svg.scaleY);
            let xy = svg.a2p(...this._xy);
            let xy1 = xy.minus([w/2, h/2]);
            this.$.attr({
                x: xy1[0], y: xy1[1],
                width: w, height: h,
                transform: `rotate(${this._theta * svg.angleDir} ${xy[0]} ${xy[1]})`,
            });
            this._changed = false;
        }
    }

}


class JSVG_Circle extends JSVG_Graphic {

    get r() {return this._r}

    set r(x) {
        this._r = x;
        this._changed = true;
    }

    default() {
        this._r = 1;
        return this;
    }

    draw() {
        if (this._changed) {
            let svg = this.svg;
            let xy = svg.a2p(...this._xy);
            this.$.attr({cx: xy[0], cy: xy[1], r: this.r * svg.unit})  ;
            this._changed = false;
        }
    }

}


class JSVG_Ellipse extends JSVG_Circle {

    default() {
        this._r = [1, 1];
        return this;
    }

    draw() {
        if (this._changed) {
            let svg = this.svg;
            let xy = svg.a2p(...this._xy);
            let r = this._r;
            this.$.attr({
                cx: xy[0], cy: xy[1],
                rx: Math.abs(r[0] * svg.scaleX),
                ry: Math.abs(r[1] * svg.scaleY),
            });
            if (this._theta) {
                let c = `${xy[0]} ${xy[1]}`;
                this.$.attr({transform: `rotate(${this._theta * svg.angleDir} ${c})`});                
            }
            this._changed = false;
        }
    }

}


class JSVG_Polygon extends JSVG_Graphic {

    get points() {return this._points}
    get anchor() {return this._anchor}
    
    set points(pts) {
        this._points = pts;
        this.anchor = 0;
    }

    set anchor(a) {
        this._anchor = typeof(a) == "number" ? this._points[a] : a;
        this._changed = true;
    }

    draw() {
        if (this._changed) {
            let svg = this.svg;
            let pts = "";
            for (let pt of this._points) {
                pt = svg.a2p(...pt);
                pts += ` ${pt[0]},${pt[1]}`;
            }
            let t = this._theta * svg.angleDir;
            let dxy = this._xy.minus(this._anchor);
            let rxy = svg.a2p(...this._anchor);
            t = `translate(${svg.scaleX * dxy[0]} ${svg.scaleY * dxy[1]}) rotate(${t} ${rxy[0]} ${rxy[1]})`
            this.$.attr({points: pts, transform: t});
            this._changed = false;
        }
    }

}


class JSVG_Line extends JSVG_Graphic {

    twoPoints(p1, p2) {
        let info = segment_info(p1[0], p1[1], p2[0], p2[1]);
        return this.pointSlope(info.midpoint, info.length, info.slope);
    }

    pointSlope(xy, l, m) {
        l /= 2;
        let h;
        if (Infinity == Math.abs(m)) h = [0, l];
        else {
            h = [1, m];
            h = h.times(l / hypot(...h));
        }
        this._xy = xy;
        this._half = h;
        return this;
    }

    default() {return this.pointSlope([0, 0], 1, 0)}

    get slope() {
        let h = this._half;
        return h[1] / h[0];
    }

    get length() {
        let h = this._half;
        return 2 * Math.sqrt(h[0] * h[0] + h[1] * h[1]);
    }

    draw() {
        if (this._changed) {
            let svg = this.svg;
            let xy = svg.a2p(...this._xy);
            let xy1 = svg.a2p(...this._xy.minus(this._half));
            let xy2 = svg.a2p(...this._xy.plus(this._half));
            this.$.attr({
                x1: xy1[0], y1: xy1[1],
                x2: xy2[0], y2: xy2[1],
            });
            let t = this._theta;
            if (t) this.$.attr({transform: `rotate(${t * svg.angleDir} ${xy[0]} ${xy[1]})`});
            this._changed = false;
        }
    }

}


class JSVG_Text extends JSVG_Graphic {

    draw() {
        if (this._changed) {
            let svg = this.svg;
            let xy = svg.a2p(...this._xy);
            this.$.attr({x: xy[0], y: xy[1]});
            let t = this._theta;
            if (t) this.$.attr({transform: `rotate(${t * svg.angleDir} ${xy[0]} ${xy[1]})`});
            this._changed = false;
        }
    }

}


class JSVG_Image extends JSVG_Rect {}
class JSVG_Polyline extends JSVG_Polygon {}

JSVG_Graphic.type = {
    g: JSVG_Canvas, line: JSVG_Line, text: JSVG_Text,
    circle: JSVG_Circle, ellipse: JSVG_Ellipse,
    rect: JSVG_Rect, image: JSVG_Image,
    polygon: JSVG_Polygon, polyline: JSVG_Polyline,
};
