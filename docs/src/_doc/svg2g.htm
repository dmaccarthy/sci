<section class="Post" data-icon="slides">   
<h2 class="Collapse">class <code>SVG2g</code></h2>
<div class="Collapse Expand">
<p>Instances of <code>SVG2g</code> represent <code>&lt;g&gt;</code> tags (groups) within the drawing. Groups can be used for applying CSS styles and for transforming (rotating, translating, etc.) and animating content.</p>
<p>It is not necessary to call the constructor directly. Instead, use the <code>group</code> method of any <code>SVG2g</code> instance to create a child group.</p>
<p>The data attributes of each instance are:</p>
<ul>
    <li><code>$</code>: A jQuery object representing the element node associated with the <code>SVG2g</code> instance.</li>
    <li><code>acc</code>: A 2-array* specifying the rates at which to change the <i>x</i>- and <i>y</i>-<code>vel</code> when the animation is playing.</li>
    <li><code>alpha</code>: The rate at which to change <code>omega</code> when the animation is playing.</li>
    <li><code>element</code>: The element node with which the instance is associated.</li>
    <li><code>omega</code>: The rate at which to change <code>theta</code> when the animation is playing.</li>
    <li><code>parent</code>: An <code>SVG2g</code> instance associated with the <code>&lt;g&gt;</code> element’s parent node, or <code>null</code> if such an instance does not exist.</li>
    <li><code>pivot</code>: An 2-array* specifying the center of rotation.</li>
    <li><code>shift</code>: An 2-array* specifying how much to translate the group.</li>
    <li><code>theta</code>: The angle in degrees by which to rotate the group around its pivot point.</li>
    <li><code>vel</code>: A 2-array* specifying the rates at which to change the <i>x</i>- and <i>y</i>-<code>shift</code> when the animation is playing.</li>
</ul>
</div>
</section>

<section class="Post" data-icon="slides">   
<h2 class="Collapse Code">Instance Methods</h2>
<div class="Collapse">
    <h3 class="Collapse Code">.align(xy, x, y)</h3>
    <div class="Collapse">
        <p>Adjusts the <code>shift</code> attribute to align the group’s bounding box...</p>
        <ul>
            <li><code>xy</code>: A 2-array* specifying the position to anchor the <code>&lt;g&gt;</code> element to.</li>
            <li><code>x</code>: A number indicating the horizontal alignment relative to the width of the bounding box; <code>0</code> aligns the box’s left edge, <code>0.5</code> its centre, and <code>1</code> its right edge.</li>
            <li><code>y</code>: A number indicating the vertical alignment relative to the height of the bounding box; <code>0</code> aligns the box’s top edge, <code>0.5</code> its middle, and <code>1</code> its bottom edge.</li>
        </ul>
        <p>The <code>align</code> method returns the <code>SVG2g</code> instance on which it was called.</p>
    </div>

    <h3 class="Collapse Code">.clip(id)</h3>
    <div class="Collapse">
        <p>Sets the group’s <code>clip-path</code> attribute to reference the <code>&lt;clipPath&gt;</code> element with the specified <code>id</code> attribute.</p>
    </div>

    <h3 class="Collapse Code">.clipPath(id, clone)</h3>
    <div class="Collapse">
        <p>Creates a new <code>&lt;clipPath&gt;</code> element as a child of the <code>&lt;defs&gt;</code> node and copies or moves the group’s content into this new node.</p>
        <ul>
            <li><code>id</code>: A string value for the new node’s <code>id</code> attribute.</li>
            <li><code>clone</code>: A boolean value indicating whether to clone the group’s content.</li>
        </ul>
    </div>

    <h3 class="Collapse Code">.config(attr)</h3>
    <div class="Collapse">
        <p>This method sets multiple attributes of the instance and updates the corresponding <code>&lt;g&gt;</code> element. It is preferable to use the <code>config</code> method rather than setting attributes by direct assignment, to ensure that changes are written to the document.</p>
        <pre class="Code" data-echo="js">some_g.config({theta: 45, pivot: [3, 1], shift: [2, -1]});</pre>
        <p>The <code>config</code> method returns the <code>SVG2g</code> instance on which it was called.</p>
    </div>

    <h3 class="Collapse Code">.coord_from_parent(xy)</h3>
    <div class="Collapse">
        <p>Applies a coordinate transformation to calculate the coordinates of a point in the instance’s coordinate system from <code>xy</code>, a 2-array describing a point in the parent group’s coordinate system. Returns the point as an <code>RArray</code>.</p>
    </div>

    <h3 class="Collapse Code">.coord_from_svg(xy)</h3>
    <div class="Collapse">
        <p>Applies a coordinate transformation to calculate the coordinates of a point in the instance’s coordinate system from <code>xy</code>, a 2-array describing a point in the <code>&lt;svg&gt;</code> element’s coordinate system. Returns the point as an <code>RArray</code>.</p>
    </div>

    <h3 class="Collapse Code">.coord_to_parent(xy)</h3>
    <div class="Collapse">
        <p>Applies a coordinate transformation to calculate the coordinates of a point in the parent group’s coordinate system from <code>xy</code>, a 2-array describing a point in the instance’s coordinate system. Returns the point as an <code>RArray</code>.</p>
    </div>

    <h3 class="Collapse Code">.coord_to_svg(xy)</h3>
    <div class="Collapse">
        <p>Applies a coordinate transformation to calculate the coordinates of a point in the <code>&lt;svg&gt;</code> element’s coordinate system from <code>xy</code>, a 2-array describing a point in the instance’s coordinate system. Returns the point as an <code>RArray</code>.</p>
    </div>

    <h3 class="Collapse Code">.css(...rules)</h3>
    <div class="Collapse">
        <p>Add CSS classes or rules to the <code>&lt;g&gt;</code> or <code>&lt;svg&gt;</code> element associated with the instance on which the method is called.</p>
        <pre class="Code" data-echo="js">some_g.css(".Class1", "red", {"fill-opacity": 0.4});</pre>
        <p>In the above example, the element associated with the instance <code>some_g</code> will have a class <code>Class1</code>. The string <code>"red"</code> will apply the styling defined for this string in the <code>SVG2</code> class definition. Finally, the <code>fill-opacity</code> CSS value will be set to <code>0.4</code>.</p>
        <p>The <code>css</code> method returns the <code>SVG2g</code> instance on which it was called.</p>
    </div>

    <h3 class="Collapse Code">.findAll(selector)</h3>
    <div class="Collapse">
        <p>This method searches the descendant nodes of the <code>&lt;g&gt;</code> or <code>&lt;svg&gt;</code> node associated with the <code>SVG2g</code> instance. It returns an array of <code>SVG2g</code> instances associated with nodes that match the <code>selector</code>.</p>
    </div>

    <h3 class="Collapse Code">.group(...css)</h3>
    <div class="Collapse">
        <p>This method creates and returns an SVG group (represented by a new instance of <code>SVG2g</code>) that is a child node of the group (or <code>&lt;svg&gt;</code>) element associated with the instance on which the method is called.</p>
        <p>The optional arguments to this method are passed to the <code>css</code> method of the new <code>SVG2g</code> instance.</p>
    </div>

    <h3 class="Collapse Code">.shiftBy(xy)</h3>
    <div class="Collapse">
        <p>Adjusts the <code>shift</code> attribute by the 2-array <code>xy</code>.</p>
    </div>

</div></section>

<section class="Post" data-icon="slides">   
<h2 class="Collapse Code">Basic Drawing</h2>
<div class="Collapse">
    <p>These methods add or update graphics content as a child node of the group’s <code>&lt;svg&gt;</code> or <code>&lt;g&gt;</code> element. These methods return a jQuery object refering to the node created or modified.</p>

    <h3 class="Collapse Code">.circle(r, center, selector)</h3>
    <div class="Collapse">
        <p>Draws a circle of radius <code>r</code> centred at coordinates specified by the 2-array <code>center</code>. The radius may be specfied as a number indicating the radius in the group’s coordinate system, or as a string indicating the radius in pixels.</p>
        <p>The <code>selector</code> argument identifies a <code>&lt;circle&gt;</code> node to be modified. If omitted, a new element node will be created and appended.</p>
    </div>

    <h3 class="Collapse Code">.ellipse(r, center, selector)</h3>
    <div class="Collapse">
        <p>This method works like the <code>circle</code> method, except that <code>r</code> is a 2-array specifying the semi-major and semi-minor axis lengths.</p>
    </div>

    <h3 class="Collapse Code">.image(href, size, center, selector)</h3>
    <div class="Collapse">
        <p>Creates or modifies an <code>image</code> node.</p>
        <ul>
            <li><code>href</code>: The URL of the image.</li>
            <li><code>size</code>: The image width and height as a 2-array. The image will <em>not</em> be stretched if the aspect ratios do not match. Place the image inside a scaled <code>&lt;g&gt;</code> (<code>SVG2scaled</code> instance) to alter the aspect ratio.</li>
            <li><code>center</code>: Coordinates of the centre as a 2-array.</li>
            <li><code>selector</code>: A CSS/jQuery selector identifying an <code>image</code> node to be modified. If <code>null</code>, a new element node is created as a child of the group.</li>
        </ul>
        The arguments specify the URL of the image (<code>href</code>), the width and height of the image as a 2-array (<code>size</code>), and the position of the image’s centre as a 2-array (<code>center</code>).</p>
    </div>

    <h3 class="Collapse Code">.line(p1, p2, selector)</h3>
    <div class="Collapse">
        <p>Draws a line between the coordinates specified by 2-arrays <code>p1</code> and <code>p2</code>. As with other drawing methods, <code>selector</code> identifies the <code>line</code> node to be modified, and a new element will be created if this argument is omitted.</p>
    </div>

    <h3 class="Collapse Code">.poly(points, closed)</h3>
    <div class="Collapse">
        <p>Draws a polygon or polyline.</p>
        <ul>
            <li><code>points</code>: An array of ordered pairs identifying the points to plot.</li>
            <li><code>closed</code>: A boolean value specifying whether to draw a closed polygon (<code>true</code>) or a non-closed polyline (<code>false</code>); or a selector identifying an existing node to be modified.</li>
        </ul>
    </div>

    <h3 class="Collapse Code">.rect(size, center, selector)</h3>
    <div class="Collapse">
        <p>This method works like the <code>circle</code> method, except that <code>size</code> is a 2-array specifying the width and height of the rectangle.</p>
    </div>

    <h3 class="Collapse Code">.star(n, far, near)</h3>
    <div class="Collapse">
        <p>Draws a star-shaped <code>&lt;polygon&gt;</code> centred at the origin.</p>
        <ul>
            <li><code>n</code>: The number of points on the star.</li>
            <li><code>far</code>: The distance from the center to the furthest vertices.</li>
            <li><code>near</code>: The distance from the center to the nearest vertices (optional).</li>
        </ul>
    </div>

    <h3 class="Collapse Code">.text(data, xy, selector)</h3>
    <div class="Collapse">
        <p>Creates or modifies a <code>&lt;text&gt;</code> element.</p>
        <ul>
            <li><code>text</code>: The text or html content of the <code>&lt;text&gt;</code> node.</li>
            <li><code>xy</code>: A 2-array specifying the position of the text. The alignment of the text relative to <code>xy</code> is determined by the <code>text-anchor</code> and <code>dominant-baseline</code> style values.</li>
            <li><code>selector</code>: A selector identifying an existing node to be modified; if omitted a new element node is created.</li>
        </ul>
    </div>

</div></section>

<section class="Post" data-icon="slides">   
<h2 class="Collapse Code">Composite Drawing</h2>
<div class="Collapse">
    <p>These methods draw more complicated graphics, usually wrapped in a <code>&lt;g&gt;</code> element and returning the associated <code>SVG2g</code> instance.</p>

    <h3 class="Collapse Code">.arrow(info, options, anchor)</h3>
    <div class="Collapse">
        <p>Draws an arrow-shaped polygon and returns an instance of <code>SVG2arrow</code>, which is a subclass of <code>SVG2g</code>.</p>
        <ul>
            <li><code>info</code>: Information used to locate the tip and tail of the arrow. If <code>info</code> is a number, it will be interpreted as the length of the arrow which will be centred at the origin and pointed in the <i>x</i>-direction. The <code>info</code> can also be an object with a <code>tail</code> value specifying the coordinates of the arrow tail, and either a <code>tip</code> or <code>length</code> value. If a <code>length</code> is given, an <code>angle</code> can also be included to specify the direction of the arrow in degrees.</li>
            <li><code>options</code>: An object which may include the following keys to override the default appearance of the arrow:
                <ul>
                    <li><code>tail</code>: The thickness of the arrow tail.</li>
                    <li><code>head</code>: The length of the arrow head.</li>
                    <li><code>angle</code>: The angle of the arrow head.</li>
                    <li><code>shape</code>: One of the values <code>0</code>, <code>1</code>, or <code>2</code>, specifying the shape of the arrow.</li>
                    <li><code>double</code>: A boolean indicating whether to draw arrowheads at both ends.</li>
                </ul>
            </li>
            <li><code>anchor</code>: One of the strings <code>"tail"</code> (default), <code>"center"</code>, or <code>"tip"</code> specifying the pivot point for the arrow.</li>
        </ul>
    </div>

    <h3 class="Collapse Code">.ctext(...args)</h3>
    <div class="Collapse">
        <p>Create one or more groups containing centred <code>&lt;text&gt;</code> nodes. Returns an array of <code>SVG2g</code> instances.</p>
        <p>Each item in the <code>args</code> list is an array containing the text to be displayed, the position of the centred text, and an optional object containing data to be passed to the group’s <code>config</code> and/or <code>css</code> methods.</p>
        <pre class="Code" data-echo="js">
let options = {
    config: {theta: 45},
    css: ["red", {"font-size": "32px"}]
};
some_g.ctext(
    ["Text 1", [3, 3]],
    ["Text 2", [-2, 0], options]
);</pre>
    </div>

    <h3 class="Collapse Code">.locus(eq, param, args)</h3>
    <div class="Collapse">
        <p>Draw (and possibly animate) a locus generated by a function.</p>
        <p>The first argument, <code>eq</code>, is a function that generates a sequence of points to be plotted. The next argument, <code>param</code>, is a 2-array or 3-array specifying the initial and final values of the function parameter and (optionally) the number of steps. The last argument is an object of any type that will be passed to the <code>eq</code> function each time it is called.</p>
        <pre class="Code" data-echo="js">let wave = (x, t, args) => {
    let [A, wavelength, speed] = args;
    return A * Math.sin(2 * Math.PI / wavelength * (x - speed * t));
}

let svg = new SVG2("#Wave", {
    size: [480, 360],
    lrbt: [0, 10, -5, 5],
    grid: 1, margin: 1
});
let locus = <span class="Blue">svg.locus(wave, [0, 10], [1.5, 3, 2])</span>;
svg.animate(locus.css("blue2")).play();</pre>
    <p>In the example above, <code>wave</code> refers to the function that generates the locus. Its first argument is the parameter which may (or may not) be an <i>x</i>-coordinate. The next argument is the animation time, and the third argument is any additional data required by the function. In this case, the <code>wave</code> function draws a harmonic wave and <code>args</code> will be an array containing the wave amplitude, wavelength and speed.</p>
    <p>The function returns the <i>y</i>-coordinate calculated from the arguments provided. If the <code>x</code> argument is a parameter other than the <i>x-</i>coordinate, the function should return an ordered pair, <code>[x, y]</code>.</p>
    <p>The code highlighted above in blue creates a locus defined by the <code>wave</code> function, draws it from <code>x = 0</code> to <code>x = 10</code>, and passes the additional data <code>[1.5, 3, 2]</code> as the amplitude, wavelength, and speed of the wave that the animation will draw.</p>
    <p>The <code>locus</code> method returns an instance of <code>SVG2locus</code>.</p>
    </div>

    <h3 class="Collapse Code">.plot(points, size, href, theta)</h3>
    <div class="Collapse">
        <p>Plots an array of points as circles, rectangles, or images .</p>
        <pre class="Code" data-echo="js">some_g.plot([[1,2], [3,4], [5,6]], "5").css("red");
some_g.plot({x: [3, 0, 4], y: [-1, 5, 2]}, ["10", "10"], null, 45);</pre>
        <ul>
            <li><code>points</code>: The points to plot as either an array of ordered pairs, or an object with <code>x</code> and <code>y</code> as separate arrays.</li>
            <li><code>size</code>: A number specifying the radius when the points are to be plotted as circles, or a 2-array specifying the width and height for a rectangle or image. Numbers that are quoted will be interpreted as pixel units and unquoted numbers will use the drawing coordinate system.</li>
            <li><code>href</code>: A URL of an image to use as point markers; this should be <code>null</code> for circle or rectangle markers.</li>
            <li><code>theta</code>: The angle of rotation for rectangle and image markers.</li>
        </ul>
    </div>

    <h3 class="Collapse Code">.sym(xy, size, ...args)</h3>
    <div class="Collapse">
        <p>Composes a symbol which may contain subscripts, superscripts, arrows, etc. Returns a new <code>SVG2g</code> instance.</p>
        <pre class="Code" data-echo="js">some_g.group().css("symbol", "red").sym([0, 0, [0.5, 1]], 28,
    ["F", 1],
    ["→", 5, [0, "20"]],
    ["g", 6, ["12", "-8"]]
);</pre>
        <ul>
            <li><code>xy</code>: A 2-array specifying the position of the symbol. By default, the symbol group will be centred at that position. A third (optional) item can be included in the array to be passed to the <code>align</code> method.</li>
            <li><code>size</code>: The default font size in pixels. If <code>0</code> or <code>null</code>, the font size will be inherited from the group’s parent.</li>
        </ul>
        <p>Additional <code>args</code> are arrays containing up to three items:</p>
        <ul>
            <li>A portion of the symbol text.</li>
            <li>An options object which may contain the keys <code>size</code> (font size in pixels) and/or <code>css</code> (an object to be passed to jQuery <code>css</code> method). Alternatively, a flag (number) will be accepted where <code>1</code> = bold, <code>2</code> = italics, and <code>4</code> = smaller text (60% of the default).</li>
            <li>A 2-array specifying the offset for the element relative to the group.</li>
        </ul>
    </div>

    <!-- 
    g.arrow({tail, tip} or length, {tail, head, angle, shape, double}, anchor) -> SVG2arrow
    g.grid([x1, x2, dx], [y1, y2, dy]) -> SVG2g
    g.cylinder([rx, ry], L) -> SVG2g
    g.label([tm, tp] or int or (x, y, i) => string, x, y) -> SVG2g [Overridden for SVG2arrow!]
    g.tick_label(fn, x, y, tick, offset) -> g
    g.tip_to_tail(vecs, options) -> SVG2g
    g.ray(p1, p2, size or {size, ratio}, ...pos) -> SVG2g
    g.chevron(xy, dir, size or {size, ratio}) -> SVG2g
    g.stickman(h) -> SVG2g
    g.coil(size, n, reverse, r, axle) -> SVG2g
    g.textm(text, space) -> SVG2g
    g.energy_flow({radius, labels, arrows}) -> g
    g.graph({x, y, grid, data, css, appendAxes}) -> g
    g.errorBarX(x, y0, y1, dx) -> SVG2g
    g.errorBarY(x0, x1, y, dy) -> SVG2g
    g.flow(text, shape, options) -> SVG2 
    
    g.clipPath
    g.clip
    
    -->


</div></section>    

<script type="text/javascript" data-ini="">

loadFeed.data = {
    title: `SVG2g Documentation`,
    up: "src/doc/svg2",
}

</script>
