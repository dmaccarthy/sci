<section class="Post" data-icon="python">
<h2 class="Collapse">Flags</h2><div class="Collapse Expand">
<p>We saw in the previous lesson that Python’s <code>while</code> keyword can be used to repeat a block
	of instructions as long as a certain condition remains <code>True</code>.</p>

<p>One technique for controlling a loop is to use a flag. A <em class="Defn">flag</em> is a Boolean
	variable that is set to <code>True</code> before beginning the loop, and then changed to <code>False</code>
	when we want the loop to terminate. In the example below, the variable <code>waiting</code> is used as
	a flag.</p>

<pre data-echo="s13_ex1.py" data-title="1" class="Code"><span class="Blue">waiting</span> = True
while <span class="Blue">waiting</span>:
    num = int(input("Please enter a number between 1 and 100: "))
    if num < 1 or num > 100:
        print("That number is not valid!")
    else:
        <span class="Blue">waiting</span> = False
print("Your number is", num)</pre>
</div></section>

<section class="Post" data-icon="python">
<h2 class="Collapse">Counters</h2><div class="Collapse Expand">
<p>Sometimes we may need to run a loop for a specific number of times. We can do this by creating an
	integer variable to count the number of times the loop has been run. This counter needs to be
	initialized to <code>0</code> before the loop. Each time the loop runs, the counter variable must be incremented
	(increased) by 1. The loop can terminate when the counter reaches the desired value.</p>

<p>Python has an increment operator (<code>+=</code>) and a decrement operator (<code>-=</code>)
	that are useful for changing the counter.</p>

<p>The example below prints the first ten numbers of the <a href="https://en.wikipedia.org/wiki/Fibonacci_number">Fibonacci Sequence</a>, using a variable <code>count</code> to ensure the loop runs ten times.</p>

<pre data-echo="s13_ex2.py" data-title="1" class="Code"><span class="DocString">"Fibonacci Sequence"</span>

currentNum = 0
nextNum = 1
<span class="Blue">count = 0</span>
while <span class="Blue">count < 10</span>:
    print(currentNum)
    currentNum, nextNum = nextNum, currentNum + nextNum
    <span class="Blue">count += 1</span>  <span class="Comment"># Add 1 to the <span class="Blue">count</span> variable</span></pre>

<p>Alternatively, you can initialize the counter to the number of times you want the loop to run and
	then count down (“decrement”) to zero.</p>

<pre data-echo="s13_ex3.py" data-title="1" class="Code"><span class="DocString">"Fibonacci Sequence"</span>

currentNum = 0
nextNum = 1
<span class="Blue">remaining = 10</span>
while <span class="Blue">remaining</span>:
    print(currentNum)
    currentNum, nextNum = nextNum, currentNum + nextNum
    <span class="Blue">remaining -= 1</span></pre>
</div></section>

<section class="Post" data-icon="ide">
<h2 class="Collapse">Assignment</h2>
<div class="Collapse Expand"><ol class="Assign">
<li>Write a program <code>s13_factors.py</code> that asks the user to enter a positive whole number, and then prints all of the number’s factors (numbers that divide evenly into the first number).
Use a <u>counter</u> to check each number in turn. For example, if the user enters <code>21</code>,
    the counter should check all numbers between 1 and 21 and only print those numbers that divide
    evenly into 21. You can use the <code>%</code> operator to check divisibility;
    <code>a % b</code> will equal zero (no remainder) if <code>a</code> is divisible by <code>b</code> and will
    be non-zero (there is a remainder) otherwise.</li>
<pre data-echo="q1.io" class="Code">Please enter a positive number: <span class="Blue">21</span>
1
3
7
21</pre>

<li>Write a program <code>s13_student.py</code> that prompts the user to enter their grade and their age. The program should only accept grades between 10 and 12 and ages between 14 and 19, and should loop until the user provides valid data. Use a <em>single</em> loop that is controlled with a <u>flag</u>.</li>
</ol>

</div></section>

<script type="text/javascript">

loadFeed.data = {
    title: "Flags & Counters",
    up: "cs_new/sp2/home",
    next: "cs_new/sp2/iter",
    prev: "cs_new/sp2/while",
}
  
</script>
