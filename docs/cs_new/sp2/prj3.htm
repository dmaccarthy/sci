<section class="Post" data-icon="warn.svg">
<h2 class="Collapse">Instructions</h2><div class="Collapse Expand">
<p>Complete both of the programming tasks below. Use VS Code to create, edit, and test your programs. Create the program files in the <code>cs10/python</code> folder of your Computing Science OneDrive folder.</p>
<p>All programs should have a docstring and relevant comments, and should use the “IPO” (Input, Processing, Output) program structure. Use descriptive names for variables.</p>
<p>Use only programming techniques that have been covered in these lessons. Examples that you find on the web often use
techniques that are considered bad programmming practice that should be avoided.</p>
</div></section>

<section class="Post" data-show="1" data-icon="python">
<h2 class="Collapse">Let’s Make a Deal</h2><div class="Collapse">
<p>The game show <em>Let’s Make a Deal</em> debuted on TV in 1963. One part of the game required contestants to choose one of three doors numbered 1, 2, and 3. Behind one of the doors was a prize. The other two doors contained nothing (or a “zonk” prize).</p>
<p>After the contestant selected a door, the show host revealed one of the two other doors, showing that it contained no prize. The door containing the real prize would <em>never</em> be the one revealed.</p>
<p>The contestant could then choose to keep their original selection, or switch to the remaining door that had not been revealed.</p>
<p>Download this program as <code>lets_deal.py</code>.</p>

<pre data-echo="lets_deal.py" data-title="1" class="Code"><span class="DocString">"'Let's Make a Deal' Simulation"</span>

from random import randint

prize_door = randint(1, 3)

<span class="Comment"># Complete the program!</span></pre>

<p>Complete the program to simulate many rounds of the game as described above.</p>
<ul>
    <li>Let the user choose the number of rounds to play at run-time.</li>
    <li>Randomly select the door where the prize is located.</li>
    <li>Randomly select the contestant’s choice.</li>
    <li>Randomly decide whether the contestant will hold (keep their original door) or switch to the other non-revealed door.</li>
    <li>Print the results to the console as in the examples below, if playing less than 100 rounds.</li>
</ul>
<pre data-echo="io" class="Code">Prize is behind door 2.
Contestant chooses door 1.
Door 3 is revealed.
Contestant switches and WINS!

Prize is behind door 1.
Contestant chooses door 3.
Door 2 is revealed.
Contestant holds and LOSES!</pre>
<ul>
    <li>Keep track of the wins and losses when the contestant <em>switches</em> their choice.</li>
    <li>Keep track of the wins and losses when the contestant <em>holds</em> their original choice.</li>
    <li>Print out the win probability when the contestant keeps their original choice, and the win probability when they switch.</li>
</ul>
<pre data-echo="io" class="Code">Contestant wins 868 out of 2536 (34.2%) when holding.
Contestant wins 1650 out of 2464 (67.0%) when switching.
</pre>
</div></section>

<section class="Post" data-show="1" data-icon="python">
<h2 class="Collapse">Package Factory</h2><div class="Collapse">
<p>The Package Factory manufactures three types of packages identified as <code>A</code>, <code>B</code>, and <code>C</code>. The masses of these packages are 27.5, 14.6 and 81.3 grams respectively.</p>

<p>Employees in the shipping department need to calculate the total mass of each order. You need to write a Python program that does this. Each order will be represented by a string indicating the number of each package ordered. For example...</p>

<pre data-echo="io" class="Code">5A 7B</pre>

<p>The above string represents an order of five package <code>A</code>’s, seven package <code>B</code>’s and no package <code>C</code>’s. The packages do not need to be in order. Sometimes, two or more orders may be combined so that the package type might be repeated...</p>

<pre data-echo="io" class="Code">2B 4A 3C 1A 7B</pre>

<p>The above would result in five <code>A</code>’s, nine <code>B</code>’s, and three <code>C</code>’s.</p>

<p>Download this program as <code>package.py</code>. Modify the program so that it asks the user to enter the order as described above, and then calculates the total number of each package and the total mass of the order.</p>

<pre data-echo="package.py" data-title="1" class="Code"><span class="DocString">"Package Factory shipping calculator"</span>

<span class="Comment"># Package masses...</span>
A = 27.5
B = 14.6
C = 81.3

<span class="Comment"># Complete the program!</span></pre>

<p>Here is a sample of the program output with the user input printed in blue...</p>

<pre data-echo="io" class="Code">Enter an order: <span class="Blue">2B 4A 3C 1A 7B</span>
  5 A's have a mass of 137.5 grams.
  9 B's have a mass of 131.4 grams.
  3 C's have a mass of 243.9 grams.
Total order is 512.8 grams!</pre>

</div></section>

<script type="text/javascript">

loadFeed.data = {
    showDate: "2025.9.29.14",
    title: "Python Assessment #3",
    up: "cs_new/sp1/home",
}

</script>
