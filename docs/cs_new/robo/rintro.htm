<section class="Post" data-icon="robot">
<h2 class="Collapse">Robotics</h2><div class="Collapse Expand">
<p>A <em class="Defn">robot</em> is an electromechanical system that is capable of doing the following:</p>
<ul>
    <li><b>Sensing</b>: A robot is typically equipped with <em class="Defn">sensors</em> that allow it to experience its surroundings. Sensors may include a camera or light detector; microphone or sound detector; gyroscope, compass or GPS; infrared proximity detector; or many others.</li>
    <li><b>Planning</b>: Using its sensor data, a robot can make decisions as to what actions it needs to perform in order to accomplish its goals.</li>
    <li><b>Acting</b>: Robots are often equipped with <em class="Defn">actuators</em> (e.g. motors and servos; speakers; light or radio transmitters) that allow it to move itself or other objects and to act in other ways.</li>
</ul>
<p>These are known as <em class="Defn">primitives</em>, or primitive behaviours, of robots. The Sense-Plan-Act paradigm for robotics is analogous to the Input-Processing-Output approach to computer programming. The robot’s sensors provide its input and its actuators provide its output.</p>
</div></section>

<section class="Post" data-icon="robot">
<h2 class="Collapse">sc8pr Robotics</h2><div class="Collapse Expand">
<p>We will be using a simulated robot that is part of the <a href="https://dmaccarthy.github.io/sc8pr"><code>sc8pr</code></a>
    package for Python 3. This package is not part of the Python standard library; it has to be
    installed separately from Python itself. If you are using a computer that does not already
    have <code>sc8pr</code>, installation may depend on the IDE you are using.</p>
<p>If you are using a fork of the <a class="Code" target="sal-py" href="https://replit.com/@DavidMacCarthy/sal-py">sal-py</a> repl in <code>repl.it</code>, it should be pre-configured with <code>sc8pr</code>.
    You can click on “Packages” in the “Tools” panel to install and remove packages like <code>sc8pr</code>.</p>
<p>If you are using Thonny, go to the “Tools” menu and select “Manage packages...”</p>
<p class="Center"><img src="cs_new/sp1/img/thonny.png" data-aspect="644/464" alt="Thonny"/></p>
<ol>
    <li>Type the name of the software package, <code>sc8pr</code>.</li>
    <li>Click the button to search the Python Package Index (PyPI).</li>
    <li>Click the three dots.</li>
    <li>Select the desired version. This course uses <code>sc8pr 3.0</code>.</li>
    <li>Check “Upgrade Dependencies” and then click the Install button.</li>
</ol>
</div></section>

<section class="Post" data-icon="robot">
<h2 class="Collapse">Robot Control Function</h2><div class="Collapse Expand">
<p>Your job will be to program the robot to complete the challenges that you are given. To program the
    robot, you create its “brain”. A robot brain is also called a <em class="Defn">robot control function</em>. As
    the name implies, it is a Python function that tells the robot what to do. Robots that are programmed
    to collect sensory data, plan actions directed toward a goal, and carry out those actions, are said
    to have <em class="Defn">agency</em>; they can act autonomously (under their own control) rather than under the control
    of an operator (like a remote control device).</p>
<p>Here is an example of a robotics simulation...</p>

<pre data-echo="r01_ex1.py" data-title="1" class="Code">from sc8pr.robot.arena import Arena

def brain(robot):
    <span class="Comment">"This function controls the robot"</span>
    robot.pen = "red", 3
    robot.motors = 1

<span class="Comment"># Run the simulation</span>
Arena.run(brain)</pre>

<p>We have used built-in functions (e.g. <code>print</code>, <code>input</code>) and imported functions
    (e.g. <code>randint</code>, <code>sqrt</code>) in our previous courses. Using Python’s <code>def</code>
    statement, we can define our own functions to perform tasks like controlling the robot. The first line
    of the function, <pre class="Code">def brain(robot):</pre> creates a function named <code>brain</code> and also
    creates a variable name <code>robot</code> that we can use to control the robot. As with <code>if</code>
    and <code>while</code> statements, the <code>def</code> statement ends with a colon and the subsequent
    lines that form the function body are indented by four spaces.<p>

<p>Like the program itself, any function that we define can (and should!) have its own docstring
    describing what the function does. The docstring should appear on the first line of the function
    immediately after the <code>def</code> statement. Single quotes can be used if the docstring fits on
    a single line. Use triple quotation marks (<code>"""</code>) to create a multi-line docstring.</p>
<p>In the example above, the robot brain does not do any sensing or planning. It just acts using its
    “pen” and “motors” actuators. The pen actuator causes the robot to trace a line of the specified
    color and thickness as it moves. The robot moves itself using two motors to turn its left and right
    wheels. Setting the <code>robot.motors</code> property to <code>1</code> turns <em>both</em> motors
    on at full power forward. We could use <code>0.5</code> for half power forward, or <code class="NoWrap">–0.5</code>
    for half power backward.</p>
<p>To make the robot turn, we could set the left and right motors to different power values. In the
    example below, the left wheel (<code>0.7</code>) will be moving faster than the right one
    (<code>0.3</code>), so the robot will turn clockwise while moving forward.

<pre data-echo="r01_ex2.py" data-title="1" class="Code">from sc8pr.robot.arena import Arena

def brain(robot):
    <span class="Comment">"Move the robot clockwise"</span>
    robot.pen = "red", 3
    robot.motors = 0.7, 0.3

<span class="Comment"># Run the simulation</span>
Arena.run(brain)</pre>

<p>Setting the motors to the same power but opposite directions will cause the robot to spin in place.</p>

<pre data-echo="r01_ex3.py" data-title="1" class="Code">from sc8pr.robot.arena import Arena

def brain(robot):
    <span class="Comment">"Spin the robot clockwise"</span>
    robot.pen = "red", 3
    robot.motors = 0.7, -0.7

<span class="Comment"># Run the simulation</span>
Arena.run(brain)</pre>

<p>In all of these examples, the simulation continues running even after the <code>brain</code> is
    done. If the motors were on when the <code>brain</code> finished, they will continue to run
    indefinitely. The robot has its own “sleep timer” that pauses its <code>brain</code> for a specified amount
    of time. For example, to run both motors on full power for 2.5 seconds and then stop them,
    you could use the following function.</p>

<pre data-echo="r01_ex4.py" data-title="1" class="Code">from sc8pr.robot.arena import Arena

def brain(robot):
    <span class="Comment">"Go forward for 2.5 seconds"</span>
    robot.pen = "red", 3
    robot.motors = 1      <span class="Comment"># Start both motors</span>
    robot.sleep(2.5)      <span class="Comment"># Sleep for 2.5 seconds</span>
    robot.motors = 0      <span class="Comment"># Stop both motors</span>

<span class="Comment"># Run the simulation</span>
Arena.run(brain)</pre>
</div></section>

<section class="Post" data-icon="replit">
<h2 class="Collapse">Assignment</h2><div class="Collapse">
<p class="Red">For this and all future programing assignments in this course, your “brain” function must operate the robot
    exclusively using its sensors and accuators. Do not magically change the Laws of Physics that govern the simulation,
    for example by adjusting the robot’s position or angle directly; teleportation is prohibited!</p>
<ol class="Assign">
<li>Back in Structured Programming, you used “turtle graphics” to make the turtle draw the letter “Q”
    on the screen. Making the robot follow a pattern is a bit harder, because the robot only controls
    its motors; it has no direct control over the distance it moves and the angle it turns. Complete the
    program <code>r01_letter.py</code>  to make the robot draw a different letter on the floor of the arena.</li>

<li>Make a copy of this <a target="Doc" href="https://docs.google.com/document/d/1atUJmBx4xREUgPNyZFZAakpMF7EKNmnZA554aSeCLBA">Google
    Doc</a> in the <code>CS10</code> folder of your EIPS Google Drive. Follow the instructions in the document.</li>
</ol>
</div></section>

<script type="text/javascript">

loadFeed.data = {
    title: "Intro to Robotics",
    up: `cs_new/home`,
    // prev: "cs_new/robo/",
    next: "cs_new/robo/turn",
}
  
</script>
