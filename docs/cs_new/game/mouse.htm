<section class="Post" data-icon="sc8pr">
<h2 class="Collapse">Mouse Events</h2><div class="Collapse Expand">
<p>You can “bind” mouse events to your sketch, or to sprites and other objects within your sketch, using
    the <code>onclick</code>, <code>ondrag</code>, <code>onmouseover</code>, <code>onmouseout</code>,
    <code>onmouseup</code>, and <code>onmousemotion</code> keywords. These handlers take two arguments:
    a reference to the graphics object affected, and a description of the event. Mouse events have a
    <code>pos</code> attribute that describes the mouse coordinates of the event and a <code>rel</code>
    attribute that describes the difference between the current coordinates and the coordinates of the
    last event. They also have a <code>button</code> or <code>buttons</code> attribute that tells which
    button(s) was pressed during the event.</p>
<pre class="Code" data-echo="v05_ex1.py" data-title="1">from sc8pr import Sketch, Image
from sc8pr.sprite import Sprite

def setup(sk):
    <span class="DocString">"Initialize the sketch"</span>
    sk.bg = Image("img/sky.png")
    sk["player"] = Sprite("img/alien.png").config(
        pos = sk.center,
        width = sk.width / 10
    ).bind(<span class="Blue">ondrag, onclick, onmouseover</span>)
    sk.<span class="Red">bind(onclick=missed)</span>

def <span class="Blue">onclick</span>(alien, ev):
    print("Ouch! You hit me with button {}.".format(ev.button))

def <span class="Blue">onmouseover</span>(alien, ev):
    print("That tickles!")

def <span class="Blue">ondrag</span>(alien, ev):
    print("Wheeeeeee!")
    x, y = alien.pos
    dx, dy = ev.rel
    alien.pos = x + dx, y + dy

def <span class="Red">missed</span>(sk, ev):
    <span class="DocString">"onclick handler for the sketch"</span>
    print("You missed!")

<span class="Comment"># Play the sketch</span>
Sketch().play()</pre>
<p>In this example, there are two different event handler functions for <code>onclick</code>: one that runs
    when we click on the <em>sprite</em>, and one when we click anywhere else in the <em>sketch</em>.
    Since we cannot use the same function name twice, we have used <code>onclick</code> for the sprite’s
    event handler and we have called the sketch’s event handler <code>missed</code>. The sketch can’t tell
    from the function name that the function is supposed to run when the mouse is clicked, so we have to
    explicitly identify missed as the <em>onclick</em> event handler when we call the <code>bind</code>
    method (shown above in red).</p>
</div></section>

<section class="Post" data-icon="ide">
<h2 class="Collapse">Project</h2><div class="Collapse Expand">
<p>Create your own video game using the <code>game.py</code> program in your <code>CompSci/c_game</code> OneDrive folder. Your game can be original or a recreation of a classic game but your code must be 100% your own. It must be graphics-based (as opposed to a console game) and the player must be able to interact using mouse and/or keyboard events. Your program must follow good programming practices, such as:</p>
<ul>
    <li>Internal documentation (docstrings and comments)</li>
    <li>Descriptive variable names</li>
    <li>No global variables (constants are okay)</li>
    <li>Procedures that perform a single task</li>
    <li>IPO structure within each procedure (input first, then processing, and output only after all processing is complete)</li>
</ul>
<p>Use the <code>media</code> folder for any images and/or audio files required by your program.</p>
<p>After completing the program, you must also make a <em>User’s Guide</em> to explain the goal of the game and how to use it. Use the Word file <code>game_userguide.docx</code> in your <code>CompSci/c_game</code> OneDrive folder. There is a <em>Credits</em> section for you to record the source of any images or audio that you did not create yourself.</p>
<p>After you have completed the game and <em>User’s Guide</em>, you will be given a self-assessment to complete.</p>
</div></section>

<script type="text/javascript">

loadFeed.data = {
    title: "Mouse Events",
    up: `cs_new/game/home`,
    prev: "cs_new/game/key",
}
  
</script>
