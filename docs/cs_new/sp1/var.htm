<section class="Post" data-icon="python">
<h2 class="Collapse">Variables &amp; Assignment</h2><div class="Collapse Expand">

<p>Here is a program that draws a blue triangle...</p>

<pre data-echo="s05_ex1.py" data-title="1" class="Code">from turtle import setup, speed, pencolor, penup, pendown, left, forward, exitonclick

<span class="Comment"># Set the canvas size and turtle speed</span>
setup(300, 300)
speed(1)

<span class="Comment"># Move turtle into position</span>
penup()
left(90)
forward(100)
left(150)

<span class="Comment"># Draw a blue triangle</span>
pencolor("blue")
pendown()
forward(200)
left(120)
forward(200)
left(120)
forward(200)

<span class="Comment"># Finished!</span>
exitonclick()</pre>

<p>Suppose that we wanted to modify the program to make the triangle and canvas larger.
	We would need to go back and change the arguments for <code>setup</code> and <code>forward</code>
	to bigger numbers. Any time we wanted to change the drawing size, we would need to edit
	the program in several places to change the numbers.</p>

<p>A better approach, is to use <em class="Defn">variables</em>, as shown in the program below.</p>

<pre data-echo="s05_ex2.py" data-title="1" class="Code">from turtle import setup, speed, pencolor, penup, pendown, left, forward, exitonclick

<span class="Comment"># Assign canvas and triangle size</span>
<span class="Blue">canvas_size = 300
side_length = 2 / 3 * canvas_size</span>

<span class="Comment"># Set the canvas size and turtle speed</span>
setup(<span class="Blue">canvas_size, canvas_size</span>)
speed(1)

<span class="Comment"># Move turtle into position</span>
penup()
left(90)
forward(<span class="Blue">side_length / 2</span>)
left(150)

<span class="Comment"># Draw a blue triangle</span>
pencolor("blue")
pendown()
forward(<span class="Blue">side_length</span>)
left(120)
forward(<span class="Blue">side_length</span>)
left(120)
forward(<span class="Blue">side_length</span>)

<span class="Comment"># Finished!</span>
exitonclick()</pre>

<p>Focus on the code displayed in blue. The first blue line assigns the value <code>300</code>
	to the <em class="Defn">variable name</em> <code>canvas_size</code>, which represents the width and height of the canvas.
    The next line then <em>calculates</em> the triangle side length by multiplying the canvas
	size by two-thirds, assigning the result to a second variable <code>side_length</code>.</p>

<pre data-echo="py" class="Code"><span class="Blue">canvas_size = 300
side_length = 2 / 3 * canvas_size</span></pre>

<p>When the program calls the <code>setup</code> and <code>forward</code> functions later on, it
	uses the variable names rather than literal numbers as arguments.</p>

<p>It’s now far easier to change the drawing size. All we have to do is change the first
	assignment, <code>canvas_size = 300</code>, to a different value. Python will calculate a new
	value for <code>side_length</code> based on the value you assign <code>canvas_size</code>, and the
	arguments passed to the <code>setup</code> and <code>forward</code> functions will change
	accordingly. (Run the program again after changing <code>canvas_size</code> from 300 to 600!)</p>

<p>Python’s <em class="Defn">assigment statement</em> uses the <code>=</code> symbol, which
 is called the <em class="Defn">assigment operator</em>. The <em>name</em> being assigned is
 always typed to the <em>left</em> of the operator, and the value (or an expression that Python can
 calculate) is typed on the <em>right</em> side.</p>

</div></section>

<section class="Post" data-icon="python">
<h2 class="Collapse">Naming Rules</h2><div class="Collapse Expand">

<p>There are some rules that variable names must follow:</p>
<ul>
<li>Names cannot contain spaces or (most) punctuation marks. To make a two-word name, you can use an underscore character in place of the space (<code>canvas_size</code>) or use “camel case” (<code>canvasSize</code>)</li>
<li>Names can contain letters and numerals, but cannot <em>begin</em> with a numeral.</li>
<li>Certain words have a special meaning in Python and cannot be used as names. These
    <em class="Defn">reserved words</em> include <code>import</code> and <code>from</code>.
    For a complete list of reserved words, run the following program. Note that the list of reserved words may change
    between different versions of Python.</li>
</ul>

<pre data-echo="s05_ex3.py" data-title="1" class="Code">from keyword import kwlist

for k in kwlist: print(k)</pre>

<ul><li>While it is not prohibited, it is usually a bad idea to choose a variable name that
    is already in use; for the example programs above, <code>turtle</code>, <code>speed</code>,
    and <code>left</code> are probably not good names to use for variables.</li></ul>

</div></section>

<section class="Post" data-icon="thonny">
<h2 class="Collapse">Assignment</h2><div class="Collapse Expand"><ol class="Assign">

<li>In the program below, identify which variable names are valid in Python and which are not.
    Comment out the lines with invalid names and explain within the comment what is wrong with the name.
<pre data-echo="s05_names.py" data-title="1" class="Code">player1 = 1
player one = 2
playerOne = 3
1player = 4
one_player = 5
one~player = 6</pre></li>

<li>The program below is similar to the triangle example, except that the number of sides has been made into a variable: <code>sides = 3</code>. We would like to be able to change the value of this variable to <code>4</code> to draw a square, <code>5</code> for a pentagon, and so on. Try changing the number of sides and see what happens.
    
<pre data-echo="s05_polygon.py" data-title="1" class="Code">from turtle import setup, speed, pencolor, penup, pendown, left, forward, exitonclick

<span class="Comment"># Assign canvas and shape size</span>
canvas_size = 300
<span class="Blue">sides = 3</span>
side_length = 2 / sides * canvas_size

<span class="Comment"># Set the window size and turtle speed</span>
setup(canvas_size, canvas_size)
speed(1)

<span class="Comment"># Move turtle into position</span>
penup()
left(90)
forward(canvas_size / 3)
left(150)

<span class="Comment"># Draw a blue polygon</span>
pencolor("blue")
pendown()
for side in range(sides): <span class="Comment"># We’ll learn what this means later!</span>
    forward(side_length)
    <span class="Blue">left(120)</span>

<span class="Comment"># Finished!</span>
exitonclick()</pre>

The reason the program doesn’t do what we want it to is the second to last line, <code>left(120)</code>. A complete circle is 360°, so turning by 120° is one-third of a circle and will always give us a triangle. To make a square we need to turn by one-quarter of a circle, and to make a pentagon we need to turn by one-fifth of a circle. Replace the <code>120</code> by a variable <code>turn_angle</code>, and let Python calculate <code>turn_angle</code> so that the program works correctly for any polygon.</li>

</ol></div></section>

<script type="text/javascript">

loadFeed.data = {
    title: "Variables",
    up: "cs_new/sp1/home",
    next: "cs_new/sp1/io",
    prev: "cs_new/sp1/comment",
}
  
</script>
