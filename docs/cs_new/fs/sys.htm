<section class="Post" data-icon="python">
<h2 class="Collapse">External Storage</h2><div class="Collapse Expand">
    <p>When your program is running, its data is stored in your computer’s <em class="Defn">random-access memory (RAM)</em>, which is also known as internal memory or primary storage. RAM requires a continuous source of electrical power. When your computer is powered down, all data in RAM is deleted. When a program terminates, the operating system will typically reclaim any RAM the program was using thus deleting all of the program’s data.</p>
    <p>When we want data to be saved after a program terminates and even after the computer is powered down, we need to save the data to <em class="Defn">external storage</em> (also called secondary or auxiliary storage). One of the most common types of external storage is a hard disk. A hard disk consists of a rotating disk, the surface of which has been coated with a material that can be magnetized. We can save binary data (0’s and 1’s) as magnetized or unmagnetized regions of the disk. The disk surface remains magnetized without requiring any power source.</p>
    <p class="Caption">Hard Disk Drive</p>
    <p class="Center"><a href="https://commons.wikimedia.org/wiki/File:Hard_drive-en.svg">
        <img alt="Hard Disk Drive" data-aspect="525/375" src="https://upload.wikimedia.org/wikipedia/commons/thumb/5/52/Hard_drive-en.svg/525px-Hard_drive-en.svg.png"/></a></p>
</div></section>

<section class="Post" data-icon="python">
<h2 class="Collapse">Files Systems</h2><div class="Collapse Expand">
    <p>The data stored on a hard disk (or any other type of external storage such as a solid-state or flash drive connected through a USB port), must be organized in such a way that programs can access the data they need, while not corrupting data being used by other programs. The way in which an external storage device is organized is called a <em class="Defn">file system</em>. Some of the most commonly used file systems today are:</p>
    <ul>
        <li>NTFS (Windows)</li>
        <li>Ext3 / Ext4 (Linux)</li>
        <li>HFS Plus (Mac)</li>
        <li>FAT16 / FAT32 (Older Windows/ DOS)</li>
    </ul>
    
    <p>One of the jobs of an <em class="Defn">operating system</em> (Windows, Linux, Mac OS) is managing the computer’s file systems. When a program wants to access data stored on an external storage device, the program makes a request to the operating system. The OS then decides whether to allow or deny the request.  Programs do not need to be concerned about which file system is used (e.g. Ext3 vs. NTFS) or to coordinate file system access with other programs; this is the OS’s concern.</p>
    <p>An advantage of high level programming languages, such as Python and Java, is that they usually include features for interacting with the operating system with regard to the file system. A program written in Python under Windows will still run properly under the Linux or Mac OS versions of Python (as long as you avoid using Windows-specific features.)</p>
</div></section>

<section class="Post" data-icon="python">
<h2 class="Collapse">Absolute Paths</h2><div class="Collapse Expand">
    <p>Most popular file systems organize data into files which are in turn organized into folders or directories. Folders can usually contain other folders. Each folder and file is identified by a path which describes how to locate the item within the file system. For example...</p>
    <pre class="IO">/home/images/drawing.png</pre>
    <p>The path above tells the OS to look for a folder named <code>home</code> in the top-level or “root” folder of the file system. Then look in that folder for a sub-folder named <code>images</code>, and finally to look for a file named <code>drawing.png</code> in that folder.</p>
    <p>File names often (but not always) have two parts: the portion after the dot is called the file extension and it may denote the type of data the file contains. For example, files ending <code>.png</code> probably contain an image encoded using Portable Network Graphics format, while files ending in <code>.py</code> probably contain Python source code.</p>
    <p>Windows path names differ from Unix-like systems (Linux, Mac OS) in a couple of ways. Rather than using a single root folder for the entire system, Windows assigns a root folder to each external storage device and then denotes each device by a drive letter (e.g. <code>C:</code> or <code>R:</code>). Drive letters can also be assigned as shortcuts to network folders. Windows also uses the backslash character as a path delimiter rather than forward slash used in Unix and the Web...</p>
    <pre class="IO">R:\teacher\images\drawing.png</pre>
    <p>The backslash character can cause problems for programmers because it is used in Python (and other languages) to denote escape sequences. For example, if you were to type the above Windows path as a string literal in a Python program, the <code>\t</code> combination would be treated as a tab character! (Run the following in Python 3...)</p>
    <pre data-echo="f01_ex1.py" data-title="1" class="Code">path = "R:\teacher\images\drawing.png"
print(path)</pre>
    <p>Fortunately, Python allows you to use Unix-style path names (i.e. forward slashes) even when running programs under Windows.</p>    
</div></section>

<section class="Post" data-icon="python">
<h2 class="Collapse">Relative Paths</h2><div class="Collapse Expand">
    <p>Most popular OS’s use the notion of a <em class="Defn">current working directory (CWD)</em>. When a program specifies a file without providing the path, the OS assumes that the file is located in the CWD. The CWD often (but not always) defaults to the folder in which the program file is located. Notice in the following path that the first folder in the path is not preceded by a slash character...</p>
    <pre class="IO">images/drawing.png</pre>
    <p>This is called a <em class="Defn">relative path</em>. The OS searches for the folder <code>images</code> not in the root folder of the system or device but in the CWD. When using relative paths, a double-dot identifies the parent folder of the current folder...</p>
    <pre class="IO">../images/drawing.png</pre>
    <p>You can identify the parent folder’s parent folder too...</p>
    <pre class="IO">../../images/drawing.png</pre>
</div></section>

<section class="Post" data-icon="python">
<h2 class="Collapse">Python Modules</h2><div class="Collapse Expand">
    <p>Python’s <code>os</code> module (short for operating system) includes functions for determining the CWD (<code>getcwd</code>) and changing the CWD (<code>chdir</code>)...</p>
    <pre data-echo="f01_ex2.py" data-title="1" class="Code">import os

print(os.getcwd())
os.chdir("..")
print(os.getcwd())</pre>

    <p>An exception may occur if the argument of the <code>os.chdir</code> function is not a valid absolute or relative path name, or if it describes a path to which the user does not have access.</p>
    <p>The <code>os.listdir</code> function returns a list of items (folders and files) within the specified folder. If no path is specified, a listing of the CWD will be returned...</p>
    <pre data-echo="f01_ex3.py" data-title="1" class="Code">import os

print(os.listdir())
print(os.listdir("/home"))</pre>
    
    <p>Python also includes modules <a target="py_fnmatch" href="https://docs.python.org/3.11/library/fnmatch.html"><code>fnmatch</code></a> and <a target="py_glob" href="https://docs.python.org/3.11/library/glob.html"><code>glob</code></a> that contain functions such as <code>filter</code> that you can use to obtain a subset of files in the folder. In the example below, only files with the extension <code>png</code> will be included in the list.</p>
    <pre data-echo="f01_ex4.py" data-title="1" class="Code">import os, fnmatch

allItems = os.listdir()
pngFiles =  fnmatch.filter(allItems, "*.png")
print("All items:", allItems)
print("PNG files:", pngFiles)</pre>
    
    <p>Python also has an <code>os.path</code> module that contains functions for parsing paths, checking whether an item exists and whether it is a file or a folder, and retrieving information about an item such as it size and last modification date...</p>
    <pre data-echo="f01_ex5.py" data-title="1" class="Code">import os
from os.path import isfile, isdir, getmtime, getsize
from datetime import date
from random import choice

<span class="Comment"># Get a random file or folder name
# from the current working directory</span>
item = choice(os.listdir())

<span class="Comment"># Get info about the item</span>
if isfile(item): kind = "a file"
elif isdir(item): kind = "a folder"
else: kind = "something unknown"
size = getsize(item)
modified = getmtime(item)

<span class="Comment"># Output the info</span>
print("'{}' is {}.".format(item, kind))
template = "It was last modified on {}."
print(template.format(date.fromtimestamp(modified)))
print("It contains {} bytes of information.".format(size))</pre>
</div></section>

<section class="Post" data-icon="ide">
<h2 class="Collapse">Assignment</h2><div class="Collapse Expand">
<ol class="Assign">
    <li>Complete the program <code>f01_browse.py</code> to make a working file system browser. The program should display alphabetical lists of all folders and files within the current working directory, and should give the user the option of switching to a different working directory. Use Python exception handling features (<code>try-except</code>) to deal with any invalid input. Here is an example of what the program should display...
    <p><pre class="IO">Current Folder: R:/Student/My Documents
    
    Files:
        Budget.xlsx (24.1 kB, 2018-08-31)
        Photo.jpg (83.5 kB, 2018-06-21)
    
    Subfolders:
        1. CompSci
        2. Music
        3. Science
    
    Type a number to open one of these folders or type a different path.
    Type ENTER to quit.
    
    >> <span class="Blue">./images</span></pre></p></li>
</ol>
</div></section>

<script type="text/javascript">

loadFeed.data = {
    title: "File Systems",
    up: `cs_new/fs/home`,
    // prev: "cs_new/fs/",
    next: "cs_new/fs/read",
}
  
</script>
