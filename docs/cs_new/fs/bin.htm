<section class="Post" data-icon="python">
<h2 class="Collapse">Bytes</h2><div class="Collapse Expand">
    <p>Computers use sequences of 0’s and 1’s to represent data in both internal memory (RAM) and external storage (file systems). Each 0 or 1 is called a <em class="Defn">binary digit</em> or <em class="Defn">bit</em>. On most modern computers, a <em class="Defn">byte</em> is a sequence of 8 bits. Each byte can be considered equivalent to a whole number between 0 and 255, as we learned in <a data-feed="cs_new/ct1/bin">Binary Encoding</a>.</p>
    <p>When dealing with text files, the programming language and/or operating system handle the encoding and decoding between text (i.e. <code>str</code> instances) and the sequence of bytes used to represent the data. For example, the Python 3 program below uses the UTF-8 codec to encode a text message (<code>"© 2025"</code>) as a sequence of bytes (identified in the program by the name <code>textAsBytes</code>). This encoding would occur automatically when you write to a text file...</p>
    <pre class="Code" data-echo="f05_ex1.py" data-title="1">textAsBytes = bytes("© 2025", encoding="UTF-8")
print(textAsBytes)          <span class="Comment"># b'\xc2\xa9 2025'</span>
print(list(textAsBytes))    <span class="Comment"># [194, 169, 32, 50, 48, 50, 53]</span></pre>
    
    <p>Notice that when you convert the bytes instance to a list, you can see the value of each byte as a number between 0 and 255. (The © symbol is encoded in UTF-8 using the <em>two-byte</em> sequence: 194, 169.) When you print a <code>bytes</code> instance without converting it to a list, Python displays it like a string but with the non-ASCII bytes (i.e. values greater than 127) displayed as escape sequences. Just as the <code>bytes</code> constructor can encode text to binary form, the <code>str</code> constructor can decode a sequence of bytes...</p>
    <pre class="Code" data-echo="f05_ex2.py" data-title="1">textAsBytes = bytes([194, 169, 32, 50, 48, 50, 53])
text = str(textAsBytes, encoding="UTF-8")
print(text)                 <span class="Comment">#  © 2025</span></pre>
    
    <p>Like <code>str</code> and <code>tuple</code> instances, <code>bytes</code> are <em>immutable</em>. The <code>bytearray</code> class is a mutable version of <code>bytes</code> that can be edited like a list (for example, using indices, slices, or methods such as <code>append</code> and <code>extend</code>)...</p>
    <pre class="Code" data-echo="f05_ex3.py" data-title="1">textAsBytes = bytearray("© 1998", encoding="UTF-8")

textAsBytes[-4:] = b"2025"
textAsBytes.extend(b" by Jane Doe")
textAsStr = str(textAsBytes, encoding="UTF-8")

print(textAsBytes) <span class="Comment"># bytearray(b'\xc2\xa9 2025 by Jane Doe')</span>
print(textAsStr)   <span class="Comment"># © 2025 by Jane Doe</span></pre>
</div></section>

<section class="Post" data-icon="python">
<h2 class="Collapse">Packing &amp; Unpacking</h2><div class="Collapse Expand">
    <p>Python 3 includes a <code>struct</code> module that can be used for encoding and decoding between numerical data (i.e. <code>int</code> and <code>float</code> instances) and <code>bytes</code>.  The “standard” way of representing <code>int</code> values in binary is as a 32-bit (4-byte) base two number. For example, the number 12345678 has a binary representation: <code>00000000 10111100 01100001 01001110</code>.  We can arrange these 32 bits into four bytes of 8 bits each as shown below. Each of these bytes individually represents a number between 0 and 255...</p>
    <table class="Center TD TD6">
        <tr class="Code">
            <td>0000 0000</td>
            <td>1011 1100</td>
            <td>0110 0001</td>
            <td>0100 1110</td>
        </tr>
        <tr class="Blue">
            <td>0</td>
            <td>188</td>
            <td>97</td>
            <td>78</td>
        </tr>
    </table>
    
    <p>Thus the sequence of bytes <code>[0, 188, 97, 78]</code> is one way to encode the number 12345678. This example uses <em class="Defn">big-endian</em> byte order: the byte on the end (78) has the biggest index or memory address.  This is the default byte order used for internet communication.  Some systems use a <em class="Defn">little-endian</em> byte order, in which the end byte is given the lowest index or address.  On these systems, the number 12345678 would be encoded as <code>[78, 97, 188, 0]</code>.</p>
    <p>In Python 3, we can use the <code>struct.pack</code> function to encode numbers as bytes...</p>
    <pre class="Code" data-echo="f05_ex4.py" data-title="1">from struct import pack

num = 12345678
numAsBytes = pack("!I", num)
print(numAsBytes, list(numAsBytes))</pre>
    
    <p>The first argument of <code>pack</code> specifies how we want the data encoded:</p>
    <ul>    
        <li>The <code>!</code> indicates that we want to use network (big-endian) byte order.</li>
        <li>The next letter, <code>I</code> indicates that the data will be encoded as an <em>unsigned</em>, 4-byte binary number.</li>
        <li>If we had used a lower-case <codei!</code> instead, the data would be encoded as a signed, 4-byte integer (i.e. one bit would be reserved for the sign and 31 bits for the binary number).</li>
        <li>The codes <code>f</code> and <code>d</code> are used for 4-byte and 8-byte floating point numbers respectively.</li>
    </ul>
    
    <p>In the example below, the format code <code>"!i 3d"</code> indicates one signed, 4-byte integer followed by three 8-byte floating point numbers, to be encoded using big-endian byte order...</p>
    <pre class="Code" data-echo="f05_ex5.py" data-title="1">from struct import pack

num1 = -12345678
num2 = 3.1416
num3 = -45.0
num4 = 6.63e-34
numAsBytes = pack("!i 3d", num1, num2, num3, num4)
print(numAsBytes, list(numAsBytes))</pre>
    
    <p>The result of the pack operation is a sequence of 28 bytes (4 for the signed integer <code>num1</code>, and 8 each for the three floats: <code>num2</code>, <code>num3</code>, and <code>num4</code>)</p>
    <p>We can collect the numbers to be encoded as a <code>list</code> or <code>tuple</code> However, the asterisk (<code>*</code>) in the code below indicates that Python is to pass the items in the tuple individually rather than as a single object...</p>
    <pre class="Code" data-echo="f05_ex6.py" data-title="1">from struct import pack

data = -12345678, 3.1416, -45.0, 6.63e-34
numAsBytes = pack("!i 3d", <span class="Blue">*data</span>)
print(numAsBytes, list(numAsBytes))</pre>
    
    <p>The <code>struct.unpack</code> function decodes <code>bytes</code> into a <code>tuple</code> of numbers...</p>
    <pre class="Code" data-echo="f05_ex7.py" data-title="1">from struct import unpack

numAsBytes = bytes([0, 188, 97, 78, 8, 92, 81, 205])
numTuple = unpack("!i f", numAsBytes)
print(numTuple)</pre>
</div></section>

<section class="Post" data-icon="python">
<h2 class="Collapse">Binary Files</h2><div class="Collapse Expand">
    <p>In addition to text mode, Python 3 also provides a binary mode for file I/O...</p>
    <pre class="Code" data-echo="f05_ex8.py" data-title="1">mode = "rb"
with open("myData.txt", mode) as input:
    contents = input.read()
    print(type(contents), contents)</pre>
    
    <p>The mode argument to the open function can consist of any of the text mode codes followed by a <code>b</code> for binary (<code>"rb"</code>, <code>"wb"</code>, <code>"ab"</code>, <code>"r+b"</code>, <code>"w+b"</code>, <code>"a+b"</code>).</p>
    <p>Note that when a binary mode is specified, the <code>open</code> function does not take an <code>encoding</code> argument since automatic encoding and decoding only applies in text mode. The <code>read</code> and <code>write</code> methods work for binary files just as they do for text files, with the exception that they accept and return <code>bytes</code> rather than <code>str</code> instances. To see the difference, run the example as above, and then change the <code>mode</code> to <code>"r"</code> and run it again.</p>    
</div></section>

<section class="Post" data-icon="ide">
<h2 class="Collapse">Assignment</h2><div class="Collapse Expand">
<ol class="Assign">
    <li>The file <code>resources/data.bin</code> is a binary file containing a sequence of unsigned, 4-byte integers. Write a Python 3 program <code>f05_numList.py</code> that reads the contents of the file and displays the values as decimal (base 10) numbers. Your program can tell when it reaches the end of the file because the read method will return an empty (zero length) <code>bytes</code> instance. Add a comment to the end of the program to describe the significance of the data you decoded.</li>
    <li>Data collected during a survey or a science experiment is often presented in the form of a table of numbers. In Python, we would likely use a 2D list (i.e. a list of lists) to represent the data. Write a Python 3 program <code>f05_table.py</code> that has functions to (i) load a data table from a text file, (ii) load a data table from a binary file, (iii) save a table to a text file, and (iv) save a table to a binary file. For the binary files, you may want to use the first four bytes of the file to indicate the number of fields (columns) and the next four bytes for the number of records (rows) in the table. If your program works correctly, you should be able to convert a data file from text to binary and then from binary back to text to get the original data back!  Assume that all data may be represented as a <code>float</code>.</li>
</ol>
</div></section>

<script type="text/javascript">

loadFeed.data = {
    title: "Binary Files",
    up: `cs_new/fs/home`,
    prev: "cs_new/fs/access",
    next: "cs_new/fs/indx",
}
  
</script>
