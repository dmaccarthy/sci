<section class="Post" data-icon="python">
<h2 class="Collapse">Programming Paradigms</h2><div class="Collapse Expand">
<p>A <em class="Defn">programming paradigm</em> is a perspective, or a way of thinking about what a program actually is.
    Paradigms influence how creators of programming language design their languages. Some common programming paradigms are...</p>
<ul>
<li><em class="Defn">Imperative</em> programming languages (e.g. machine language, assembly language) view a program as a sequence of instructions for the computer to carry out.</li>
<li><em class="Defn">Structured</em> programming languages (e.g. early versions of Fortran) added structures to control the flow of instructions, such as <code>if-else</code> and <code>while</code> statements.</li>
<li><em class="Defn">Procedural</em> programming languages (e.g. Pascal, C) build on structured programming by emphasizing <em>subprograms</em> (also called <em>functions</em>, <em>procedures</em>, or <em>subroutines</em>) each of which performs a specific task.</li>
</ul>

<p>Advantages of the procedural paradigm include...</p>
<ul>
<li>Modularity</li>
<li>Code Reuse</li>
<li>Top-Down Design</li>
<li>Data Hiding (Local Variables)</li>
<li>Improved Readability</li>
</ul>

<p>Python is a <em class="Defn">multi-paradigm</em> language that supports aspects of all of these paradigms, as well as the <em class="Defn">functional</em> and <em class="Defn">object-oriented</em> programming paradigms.</p>
</div></section>

<section class="Post" data-icon="python">
<h2 class="Collapse">Object-Oriented Programming</h2><div class="Collapse Expand">
<p>The object-oriented programming (OOP) paradigm adds an additional level of program structure on top of
    the procedural paradigm. OOP languages continue to use the features of structured and procedural
    programming. However, the data that the program operates on and the subprograms that operate on each
    collection of data are organized into entities called <em class="Defn">objects</em>. OOP languages usually support and encourage all or most of the following features:</p>
<ul>
<li><em class="Defn">Encapsulation</em>: Objects are like containers that “encapsulate” (contain) other objects.</li>
<li><em class="Defn">Inheritance</em>: An object’s properties and behaviours can be “inherited” from other objects.</li>
<li><em class="Defn">Polymorphism</em>: The meaning of any operation depends on the type of object that it
    operates on. For example, the Python expression <code>a + b</code> works differently when <code>a</code> and <code>b</code> are strings or lists as opposed to numbers.</li>
<li><em class="Defn">Data Abstraction</em>: The details of how an object represents its data and performs associated operations do not matter to subprograms that use the object. (They only matter to the object definition.)</li>
</ul>
</div></section>

<section class="Post" data-icon="python">
<h2 class="Collapse">What’s an Object?</h2><div class="Collapse Expand">
<p>In everyday life, an object is some tangible thing, like a person, a book, or a bicycle. In OOP, an object is a programming structure that models or represents a real object.  OOP objects need not represent only tangible things. Anything that we can think of as a “thing” can be modeled as an object.  Intangible objects can include: a date, today’s weather forecast, or your personal calendar.</p>
<p>Objects may be described by their <em class="Defn">attributes</em>. The attributes of a book object include the title, author,
    genre, publisher, and publication date. Note that the attributes of an object are themselves objects!</p>
<p>In computer programming, objects that have other objects as attributes are called <em class="Defn">composite</em> objects. For
    example, an object representing today’s weather forecast would have attributes representing the expected high and low
    temperatures and the predicted amount of precipitation. Simple objects that are not composed of other objects (e.g. <code>int</code>,
    <code>float</code>, or <code>bool</code> instances in Python) are called <em class="Defn">fundamental</em> or <em class="Defn">primitive</em> objects.</p>

</div></section>

<section class="Post" data-icon="python">
<h2 class="Collapse">Encapsulation</h2><div class="Collapse Expand">
<p><em class="Defn">Encapsulation</em> is the idea that objects can contain (encapsulate) other objects. For example, we can
    think of a <code>date</code> instance as a container that encapsulates three <code>int</code> instances which represent the year, month, and day.</p>
<p class="Center"><img src="cs_new/oop/img/date_obj.png" data-aspect="529/193" alt="Date Object"/></p>
<p>Objects that are encapsulated within composite objects are called <em class="Defn">attributes</em>. Each <code>date</code>
    instance has a <code>year</code> attribute, for example. Some programming languages use the term <em class="Defn">members</em>
    instead of attributes. Attributes that represent data can also be called <em class="Defn">properties</em> of the object.
</p>
<p>An <em class="Defn">object diagram</em> is an illustration that shows (some of) the objects encapsulated within a composite object. Here are object
    diagrams for three different <code>date</code> instances. (Object diagrams for instances are also known as <em class="Defn">instance diagrams</em>.)
<p class="Center"><img src="cs_new/oop/img/obj_diagram.png" data-aspect="728/268" alt="Object Diagram"/></p>
<p>The Python program below uses the <code>date</code> class from the <code>datetime</code> module to create and print the instances illustrated by the diagrams above...</p>
<pre class="Code" data-echo="oop1_ex1.py" data-title="1">from datetime import date

today = date.today()
newYear = date(2021, 1, 1)
confed = date(1867, 7, 1)
print(today, newYear, confed, sep="\n")</pre>

<p>Instance diagrams emphasize what is unique to each instance. Since the three instances illustrated above represent the same type of data, there is also much that these objects have in common. The common features are illustrated by a <em class="Defn">class diagram</em>...</p>
<p class="Center"><img src="cs_new/oop/img/cls_diagram.png" data-aspect="698/328" alt="Class Diagram"/></p>
<p>As the class diagram above shows, every <code>date</code> instance has <code>year</code>, <code>month</code> and <code>day</code> attributes. The class diagram cannot show specific values for these attributes because the values will differ between instances.</p>
<p>Python <code>date</code> objects also have attributes called <code>min</code> and <code>max</code> which indicate the first
    and last date that the system is capable of representing. These attributes are not unique to each instance, but are common
    to all <code>date</code> objects. This is shown by underlining the attribute names on the class diagram.</p>
<p>Another thing that all date objects have in common is the set of functions that can be used for processing dates. For example,
    the <code>date</code> constructor which is used to create new <code>date</code> instances, the function <code>today</code> which looks up
    the current date on the system clock, and a special function named <code>__sub__</code> that defines how to subtract two
    dates.</p>
<p>Encapsulated functions are called <em class="Defn">methods</em>. In a class diagram, methods are generally grouped together and
    located below the data attributes. The object diagrams above illustrate a very important concept in object-oriented
    programming: the relationship between a class and an instance. Essentially, classes are objects that encapsulate what is
    common to all objects of a particular data type, while instances are objects that encapsulate what is unique to each
    particular object. Additionally, classes act as a template for creating instances.</p>
<p>Many object-oriented programming languages (including Python) use <em class="Defn">dot notation</em> to access an object’s
    attributes. For example, the <code>today</code> method of the <code>date</code> class is referred to in the program as
    <code>date.today</code>, while the <code>year</code> attribute of a <code>date</code> instance (e.g. <code>newYear</code>)
    would be referenced as <code>newYear.year</code>. With dot notation, attribute names can be chained together. In the
    example below, we first access the <code>date</code> class’s <code>max</code> attribute (which is a <code>date</code> instance)
    and then we access that object’s <code>year</code> attribute...</p>
<pre class="Code" data-echo="oop1_ex2.py" data-title="1">from datetime import date

print(date.max.year)</pre>
</div></section>

<section class="Post" data-icon="python">
<h2 class="Collapse">Polymorphism</h2><div class="Collapse Expand">
<p>Object-oriented programming languages typically support <em class="Defn">polymorphism</em>. Because attributes are
    encapsulated within objects, it is possible to use the same name or symbol in a different context for different objects.
    Some examples of polymorphism:</p>
<ul>
<li>The <code>+</code> operator has a different meaning for the <code>float</code> class than it does for the <code>str</code> or <code>list</code> classes.</li>
<li>A class that represents data files may have <code>open</code> and <code>close</code> methods that are different from the
    <code>open</code> and <code>close</code> methods of a class used to establish connections over the internet. Also, there
    may be different versions of these methods for different types of files (e.g. a regular file, a compressed archive like a
    ZIP file, or a database file).</li>
<li>The <code>max</code> property of the <code>date</code> class refers to a different object than the <code>max</code> property
    of the <code>time</code> class (even though both of these classes are defined in the same module, <code>datetime</code>!)</li>
</div></section>

<section class="Post" data-icon="gdoc">
<h2 class="Collapse">Assignment</h2><div class="Collapse Expand">
<ol class="Assign">
<li>
    <p class="NoTop">Imagine that you have been hired by a hospital to design a Python class <code>Patient</code> that will be used by a computer program to monitor intensive care patients. The main program will periodically send the patient’s vital signs to an instance of your <code>Patient</code> class. The instance will encapsulate the relevant data as attributes, record the information in the patient’s record, and decide if the information requires sending an urgent or non-urgent request for assistance from medical staff.</p>
    <p>Use the Excel spreadsheet <code>oop1_patient.xlsx</code> in your <code>CompSci/b_oop</code> OneDrive folder to create a <em>class diagram</em> for the <code>Patient</code> class. You will first need to decide which attributes the class will require. You will need to decide the data type (class) of each data attribute and, for the methods, the class of each parameter and of the object (if any) that the method returns. You do not have to implement the class in Python. Be sure to share your completed class diagram with your teacher.</p>
</li>
</ol>
</div></section>

<script type="text/javascript">

loadFeed.data = {
    title: "Objects",
    up: `cs_new/oop/home`,
    next: "cs_new/oop/mod",
}
  
</script>
