<section class="Post" data-icon="html5.svg">
<h2 class="Collapse">XML</h2><div class="Collapse Expand">

<p>In the last lesson, we used a graphical representation (i.e. a tree) to
illustrate hierarchical data. Unfortunately, graphics files tend to be quite large, taking up
more space on a hard disk and taking more time to transfer across the Internet.
Another problem is that it is very difficult for computer programs to extract text
information (“The capital of Alberta is Edmonton.”) from a graphics file.</p>

<p>To address these issues, computer programmers developed <em class="Defn">Extensible Markup
Language (XML)</em>. XML is a special text format that is widely used to describe
hierarchical data. Here is an example of a single node of a data tree encoded as XML...</p>

<pre class="Code" data-echo="xml" contenteditable="true">&lt;Community name="Sherwood Heights" /&gt;</pre>

<p class="Red">You can view the XML document above in its own browser tab by clicking the middle of the three blue icons. You can edit the code if you want to before you preview it.</p>

<ul>
<li>XML uses the less than (<code>&lt;</code>) and greater than (<code>&gt;</code>) symbols
	as brackets to enclose the tags that represent the data tree nodes. The node’s <em class="Defn">tag name</em>
	(<code>Community</code>) is the first thing that appears inside the tag. To be valid XML,
	tag names cannot contain spaces, and they must begin with a letter. You are not allowed to use
	the letters ‘xml’ as the first three letters of the tag name.</li>
<li>The tag name may be followed by one or more attributes. Valid attribute <em>names</em> follow
	the same rules as tag names. Attribute <em>values</em> are enclosed in quotes and do not have
	to follow the naming rules.</li>
<li>The slash character (<code>/</code>) at the end of a tag indicates that the node will not have
	any child nodes. This kind of tag is called a <em class="Defn">self-closing</em> tag.</li>
<li>Data tree nodes are called <em class="Defn">element nodes</em> in XML. XML supports several other
	types of nodes in addition to element nodes.</li>
</ul>

<p>Elements that have child nodes are a little more complicated. These nodes require <em>two</em>
	tags in XML. The start-tag marks the beginning of the element and the end-tag marks the element’s
	end. The space between is used for the child nodes...</p>

<pre class="Code" data-echo="xml" contenteditable="true">&lt;Municipality name="Strathcona" type="County"&gt;

    <span class="Comment">&lt;!-- Child nodes go here --&gt;</span>

&lt;/Municipality&gt;</pre>

<ul>
	<li>The start-tag works exactly like a self-closing tag, except that there is
	no slash character (/) at the end.</li>
	<li>The end-tag <em>begins</em> with a slash character!</li>
	<li>The tag names must be identical for the paired start- and end-tags.</li>
	<li>Attribute data is placed only in the start-tag.</li>
</ul>

<p>Here is the XML code for a <code>Municipality</code> node and its two <code>Community</code>
	child nodes...</p>

<pre class="Code" data-echo="xml" contenteditable="true">&lt;Municipality name="Strathcona" type="County"&gt;
   &lt;Community name="Sherwood Heights" /&gt;
   &lt;Community name="Lakeland Ridge" /&gt;
&lt;/Municipality&gt;</pre>

<p>Here is the complete XML for the whole data tree that we used in the	last lesson.</p>
<pre class="Code" data-echo="xml" contenteditable="true">&lt;Country name="Canada" capital="Ottawa"&gt;
    &lt;Province name="Alberta" capital="Edmonton"&gt;
        &lt;Municipality name="Strathcona" type="County"&gt;
            &lt;Community name="Sherwood Heights" /&gt;
            &lt;Community name="Lakeland Ridge" /&gt;
        &lt;/Municipality&gt;
        &lt;Municipality name="Edmonton" type="City" /&gt;
    &lt;/Province&gt;
    &lt;Province name="Ontario" capital="Toronto"&gt;
        &lt;Municipality name="London" type="City" /&gt;
    &lt;/Province&gt;
&lt;/Country&gt;</pre>

<p>Documents that obey all the rules of XML are called <em class="Defn">well-formed</em>. Documents
	that are not well-formed are likely to produce an error when a computer program tries to read them.
	The code below attempts to use an attribute name (<code>capital city</code>) that contains a space.
	Preview the document in your browser to see what happens. Then remove the space and preview it again.</p>

<pre class="Code" data-echo="xml" contenteditable="true">&lt;Country name="Canada" capital city="Ottawa"/&gt;</pre>
    
</div></section>

<section class="Post" data-icon="replit">
<h2 class="Collapse">Assignment</h2><div class="Collapse Expand">
<p>Login to <a href="https://replit.com/@DavidMacCarthy/Web1" target="repl_fork">replit</a> and create a fork of the <code>Web1</code> repl.
    Complete the coding assignments in this repl. Be sure to invite your teacher (<code class="Var">email</code>) as a collabortor for your repl.</p>
<p>Ensure that each of your XML documents displays properly in your web browser and that it passes as “valid” in an <a href="https://codebeautify.org/xmlvalidator" target="val">XML validator tool</a>.</p>
<ol class="Assign">
	<li>Create a well-formed XML document <code>w03_Canada.xml</code> to list all of the provinces
	and territories of Canada along with their capital cities and date of entry into confederation.</li>
	<li>In the last assignment, you created a data tree for a student’s school schedule. Encode this
		data tree as a well-formed XML document <code>w03_schedule.xml</code>.	Use your own information
		rather than the imaginary student from the example.</li>
	<li>Encode all of the data from this <a href="https://www.nll.com/standings" target="st">National
		Lacrosse League</a> standings table as a well-formed document <code>w03_NLL.xml</code>. If the
		current season has not started yet, encode the data for the previous season.</li>
</ol>
</div></section>

<script type="text/javascript">

tmp = localStorage.getItem("cs_course") == "20" ? "cs20" : "cs10";
    
loadFeed.data = {
    title: "eXtensible Markup Language (XML)",
    up: `cs_new/${tmp}`,
    prev: "cs_new/web1/tree",
    next: "cs_new/web1/text",
}
  
</script>
