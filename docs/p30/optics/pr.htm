<section class="Post" data-show="2024.11.5.16" data-icon="simulation">
<style type="text/css">

#SimControls td {
    min-width: 5em;
}

#SimControls tr:first-child td {
    border: none;
    padding-bottom: 0.5em;     
}

#SimControls input[type='text'] {
    font-size: 100%;
    text-align: center;
    width: 6em;
    margin: 2px;
    border: none;
}

</style>
<h2 class="Collapse">Principal Ray Diagram</h2>
<div class="Collapse Expand">
    <p class="Center"><svg id="RayApplet"></svg></p>
    <table id="SimControls" class="Center Bottom">
    <tr><td colspan="2">
        <input type="radio" name="device" checked="1"/> Mirror &nbsp;
        <input type="radio" name="device"/> Lens
    </td></tr>
    <tr>
        <td><span class="TeX">f</span></td>
        <td><input type="text" value="1"/></td>
    </tr>
    <tr class="Blue">
        <td><span class="TeX">d_o</span></td>
        <td><input class="Blue" type="text" value="3"/></td>
    </tr>
    <tr class="Red">
        <td><span class="TeX">d_i</span></td>
        <td><input class="Red" type="text"/></td>
    </tr>
    <tr>
        <td><span class="TeX">m</span></td>
        <td><input type="text"/></td>
    </tr>
    </table>
    
</div>

<script type="text/javascript" data-init="sim">

loadFeed.sim = () => {
    loadFeed.sim.given = [0, 1];
    $("#SimControls input").on("change", (ev) => {
        let e = $("#SimControls input");
        let given = loadFeed.sim.given;
        for (let i=0;i<4;i++) if (i != given[1] && e[i+2] == ev.currentTarget)
            loadFeed.sim.given = [given[1], i];
        loadFeed.sim.draw();
    });
    loadFeed.sim.draw();

    let t = clickCycle.toggle;
    let svg = () => $("#RayApplet")[0].graphic;
    clickCycle($("#RayApplet")[0], -1,
        () => {t(svg(), false, 0, 1, 2, 3, 4)},
        () => {t(svg(), true, 0)},
        () => {t(svg(), true, 1)},
        () => {t(svg(), true, 2)},
        () => {t(svg(), true, 3)},
        () => {t(svg(), true, 4)},
    );
}
    
loadFeed.sim.solve = () => {
    let given = loadFeed.sim.given;
    let n = Math.pow(2, given[0]) + Math.pow(2, given[1]);
    let e = $("#SimControls input[type='text']");
    let data = [];
    for (let ei of e) data.push(parseFloat($(ei).val()));
    let [f, d, di, m] = data;
    if (n == 3) { // f, do
        di = 1 / (1/f - 1/d);
        m = -di / d;
    }
    else if (n == 5) { // f, di
        d = 1 / (1/f - 1/di);
        m = -di / d;
    }
    else if (n == 9) { // f, m
        d = f * (1 - 1/m);
        di = -m * d;
    }
    else if (n == 6) { // do, di
        m = -di / d;
        f = 1 / (1/d + 1/di);
    }
    else if (n == 10) { // do, m
        di = -m * d;
        f = 1 / (1/d + 1/di);
    }
    else { // di, m
        d = -di / m;
        f = 1 / (1/d + 1/di);
    }
    if (d < 0) {d = -d; di = -di; f = -f}
    data = [f, d, di, m];
    for (let i=0;i<4;i++) $(e[i]).val(data[i].toPrecision(4));
    return data;
}

loadFeed.sim.draw = () => {
    let data = loadFeed.sim.solve();
    let ok = true;
    for (let x of data) if (!isFinite(x)) ok = false;
    let e = $("#RayApplet").html(ok ? "" : `<text x="351" y="100" style="text-anchor: middle">No finite solution!</text>`);
    if (ok) loadFeed.sim.diagram(e, ...data);
}

loadFeed.sim.diagram = (e, f, d, di, m) => {
    // Calculate drawing scale
    lens = $("#SimControls input[type='radio']")[1].checked;
    let x1 = Math.min(0, 2 * f, di);
    let x2 = Math.max(2 * f, d, di);
    if (lens) {
        x1 = Math.min(f, -f, -di);
        x2 = Math.max(f, -f, d, -di);
    }
    let y2 = 1.2 * Math.max(1, m, -m);
    let dx = (x2 - x1) / 10;
    x1 -= dx; x2 += dx;
    let w = x2 - x1;

    // Create drawing
    let svg = new SVG2(e, {size: [702, 352], lrbt: [x1, x2, -y2, y2]});
    svg.element.cycleStatus = -1;

    // Calculate arrow widths
    let width = Math.sqrt(Math.abs(m));
    let w1 = Math.min(20, Math.max(4, 8 / width));
    let w2 = Math.min(20, Math.max(4, 8 * width));

    // Object and image
    let po = [d, 1];
    svg.arrow({tail: [d, 0], tip: po}, {tail: `${w1}`}).$.css({fill: "#0065FE"});
    let x = lens ? -di : di;
    let image = svg.arrow({tail: [x, 0], tip: [x, m]}, {tail: `${w2}`});
    if (di < 0) image.$.css({fill: "lightgrey"});
    else image.$.css({fill: "red"});
    image.$.addClass("Toggle4");

    // Ray groups
    let gv = svg.group();
    let gi = svg.group();
    let gr = svg.group();
    gi.$.css({stroke: "#0065FE", fill: "none"}).addClass("Toggle0");
    gr.$.css({stroke: "red", fill: "none"}).addClass("Toggle1");
    gv.$.css({stroke: "grey", fill: "none", "stroke-dasharray": "8,8"});

    let rayPt = (p1, dx, k) => [p1, new RArray(dx, k * dx).plus(p1)];
    let ray = (g, p1, p2) => g.ray(p1, p2, {size: "10", ratio: 0.5}, uniform(0.1, 0.4), uniform(0.6, 0.9));

    // Paraxial rays
    ray(gi, po, [0, 1]);
    ray(gr, [0, m], [lens ? x1 : x2, m]).$.addClass("Toggle2");
    gv.line([0, m], [lens ? x2 : x1, m]).addClass("Toggle2");

    if (lens) {
        ray(gi, po, [0, 0]);
        ray(gi, ...rayPt(po, -d, 1 / (d - f)));
        ray(gr, ...rayPt([0, 0], x1, -m / di)).$.addClass("Toggle3");
        ray(gr, ...rayPt([0, 1], x1, 1 / f));
        gv.line(...rayPt([0, 0], x2, -m / di)).addClass("Toggle3");
        gv.line(...rayPt([0, 1], x2, 1 / f)).addClass("Toggle1");
    }
    else {
        ray(gi, po, [0, m]);
        ray(gr, ...rayPt([0, 1], x2, -1 / f));
        let k = 1 / (d - 2 * f);
        if (isFinite(k)) {
            let pc = [0, -2 * f * k];
            ray(gi, ...rayPt(po, -d, k));
            ray(gr, ...rayPt(pc, x2, k)).$.addClass("Toggle3");
            gv.line(...rayPt(pc, x1, k)).addClass("Toggle3");
        }
        gv.line(...rayPt([0, 1], x1, -1 / f)).addClass("Toggle1");
    }
    if (di > 0) gv.$.remove();

    // Mirror/lens and principal axis
    let g = svg.group();
    g.$.css({stroke: "black", "stroke-width": "2px"});
    g.line([x1, 0], [x2, 0]);
    g.line([0, -y2], [0, y2]).css({"stroke-width": "4px"});

    // Focus and centre
    let css = {fill: "white", stroke: "black"};
    svg.circle("4", [f, 0]).css(css);
    svg.circle("4", [lens ? -f : 2 * f, 0]).css(css);
    css = {"font-size": "20px", "font-weight": "bold"};
    svg.text(lens ? "F’": "F", [f, y2/10]).css(css);
    svg.text(lens ? "F" : "C", [lens ? -f : 2 * f, y2/10]).css(css);
}

</script>
</section>

<section class="Post" data-icon="slides">
<h2 class="Collapse">Lesson Notes</h2>
<div class="Collapse">
<section class="Slide Center">
<h1 id="Title">?</h1>
</section>

<section class="Slide"><h3>?</h3>
</section>

</div></section>

<section class="Post" data-answers="1" data-icon="correct">
<h2 class="Collapse">Practice</h2>
<div class="Collapse">
<ol>

</ol>
</div></section>

<section class="Post" data-answers="1" data-icon="correct">
<h2 class="Collapse">Review</h2>
<div class="Collapse">
<ol>
</ol>
</div></section>

<script type="text/javascript">

loadFeed.data = {
    title: `${siteData.lesson}13.7 — Principal Rays`,
    answerDate: "2024.11.5.16",
    num: "13.7",
    up: "p30/units/C",
    prev: "p30/optics/rays",
    next: "p30/optics/mirror",
}

</script>