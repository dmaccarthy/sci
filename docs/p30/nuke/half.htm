<!-- © 2023-2024 by D.G. MacCarthy <sc8pr.py@gmail.com> -->

<section class="Post" data-icon="simulation.svg">
<h2 class="Collapse">Simulation</h2>
<div class="Collapse Expand Center">

<p>Time: <span id="Time"><a href="javascript:loadFeed.sim.startSim()">Click to start</a></span>
    <span style="padding-left:2em">Decays: <span id="Count">0</span></span></p>

<p><svg data-aspect="1" id="Sample" height="512" width="512">
<style>

circle {fill: #b0b0ff; stroke: none}
.Daughter {fill: #ff6090}
.Alpha {fill: blue}

</style>
</svg></p>

<p id="Code"></p>

<script type="text/javascript" data-init="sim">

loadFeed.sim = () => {
    let f = loadFeed.sim;
    let n = f.grid = 50;
    svg = new SVG_Animation("#Sample", -2/3, n - 1/3, -2/3).config({fix: 1});
    f.ages = [];
    let halflife = 60 * uniform(8, 24);
    if (f.exportData) console.log(`Halflife = ${(halflife/60).toFixed(1)} min`);
    $("#Code").html(`Sample Code: ${btoa(halflife.toFixed(2)).replace('==', '$')}`);
    let k = log(2) / halflife;
    let lifetime = (r) => {return -log(1 - r) / k};
    for (let x=0;x<n;x++) {
        for (let y=0;y<n;y++) {
            f.ages.push(lifetime(Math.random()));
            svg.circle(4 * svg.pixelX, [x, y]).final();
        }
    }
    f.count = 0;
    svg.beforeupdate = function() {
        let c = this.$.find("circle.Alpha");
        for (let i=0;i<c.length;i++) {
            let ci = c[i].graphic;
            let [x, y] = ci.position;
            if (Math.min(x, y) < -1 || Math.max(x, y) > loadFeed.sim.grid + 1) ci.final(1);
        }
    }

}

loadFeed.sim.decode = (c) => {
    return parseFloat(atob(c.replace('$', '=='))) / 60;
}

loadFeed.sim.exportData = false;

loadFeed.sim.startSim = () => {
    let f = loadFeed.sim;
    f.start = new Date().getTime();
    f._t = 0;
    f.update();
    $("#Sample")[0].graphic.play();
}
    
loadFeed.sim.update = () => {
    let f = loadFeed.sim;
    let t = (new Date().getTime() - f.start) / 1000;
    if (f.exportData && t - f._t > 30) {
        console.log(t, f.count);
        f._t = t;
    }
    let svg = $("#Sample")[0].graphic;
    let nuke = $("#Sample circle");
    let ages = f.ages;
    let n = f.grid;
    for (let i=0;i<ages.length;i++) 
        if (ages[i] && ages[i] < t) {
            f.count++;
            $(nuke[i]).addClass("Daughter");
            if (ages[i] > t - 0.15) {
                let xy = [Math.floor(i / n), i % n];
                let v = vec2d(uniform(30, 50), uniform(0, 360));
                let c = svg.circle(2.5 * svg.pixelX, xy).config({vel: v});
                c.$.addClass("Alpha");
            }
            ages[i] = null;
        }
    $("#Time").html(t.toFixed(1) + " s");
    $("#Count").html(f.count);
    setTimeout(f.update, 100);
}

loadFeed.data = {
    title: "Half-life",
    // up: "p30/nuke/home",
    up: "home",
}

</script>
</div></section>

<section class="Post" data-icon="help">
<h2 class="Collapse">Help</h2>
<div class="Collapse">
<p>This page simulates the decay of a sample of radioactive nuclei with a random half-life. Use the link labelled “Click to start” above the drawing to begin the simulation.
    As it runs, the elapsed time and the total number of decays will be displayed</p>
<p>The light blue circles represent parent nuclei (not drawn to scale!) while the red circles are the daughter nuclei (the product of the decay).
    The small dark blue circles represent alpha or beta particles emitted from the nucleus when the decay occurs.</p>
<p>When graphing your data, remember that it is the decay <em>rate</em> that is expected to follow an exponential model, <b>not</b> the accumulated number of decays!</p>
<p>You may wish to use a software tool to help graph and analyze the exponential data...</p>
<p class="BtnGrid">
    <button data-icon="desmos" data-open="https://www.desmos.com/calculator/sijzolnp1j">Desmos<br/>Data Analysis</button>
</p>
</div>
</section>
