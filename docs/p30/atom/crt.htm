<section class="Post" data-icon="simulation">
<style type="text/css">

#SimControls td {
    min-width: 5em;
    padding: 3px;
}
    
</style>
<h2 class="Collapse">Simulation</h2>
<div class="Collapse">
    <p class="Center"><svg id="CRTSim"></svg></p>
    <table id="SimControls" class="Center Bottom"><tbody>
    <tr>
        <td>V<sub>acc</sub></td><td>1200 V</td>
        <td><input type="range" min="800" max="2000" value="1200" step="10"></td>
    </tr>
    <tr>
        <td>V<sub>def</sub></td><td>0 V</td>
        <td><input type="range" min="0" max="2000" value="0" step="10"></td>
    </tr>
    <tr>
        <td>B</td><td>0.00 mT</td>
        <td><input type="range" min="0" max="6" value="0" step="0.01"></td>
    </tr>
    </tbody></table>
</div>

<script type="text/javascript" data-init="sim">

loadFeed.sim = () => {
    let e = $("#CRTSim").attr({width: 642, height: 322, "data-aspect": "642/322"});
    let svg = new SVG_Animation(e, -2, 12, -3.5, 3.5, 1);
    svg.grid([0, 10, 1], [-3, 3, 1]).$.find("line.Axis").removeClass("Axis");
    svg.conics = svg.group();
    let g = svg.group().css({fill: "silver", stroke: "black"});
    svg.rect([10, 0.2], [5, 3.1], g);
    svg.rect([10, 0.2], [5, -3.1], g);

    g = svg.group().css({fill: "none", stroke: "#0065FE", "stroke-width": "3px"});
    svg.line([-2, 0], [0, 0], g);
    svg.ray = svg.poly([[0, 0], [12, 0]], 0, g);

    let css = {stroke: "red", "stroke-width": "1px", fill: "none"}
    svg.parab = svg.locus((x, t, a) => a * x * x, [-2, 12], -1, 0, svg.conics).css(css);
    svg.measure = svg.text("0.0", [0, 0], svg.conics).css({fill: "red"});
    svg.conics.$.children("*").hide();

    $("#SimControls input").css({width: "16em"}).on("change", (ev) => {   
        let ray = $("#CRTSim")[0].graphic.ray;
        ray.setPoints([...loadFeed.sim.ray()]);
    });

    svg.$.on("click", (ev) => {
        let [x, y] = svg.eventCoords(ev).coords;
        if (x > 0) {
            if (y < 0) {
                if (svg.circ) svg.circ.$.fadeOut();
                let p = svg.parab;
                let a = p.args = y / (x * x);
                if (a > -0.03) {
                    let y0 = 100 * a;
                    let c = svg.measure.config({position: [11, y0 < -1 ? -0.5 : y0 - 0.6]}).update(0);
                    c.$.html(`θ = ${atan(-20 * a).toFixed(1)}°`).fadeIn();
                }
                else svg.measure.$.fadeOut();
                p.update(0);
                p.$.fadeIn();
            }
            else if (y > 0) {
                svg.parab.$.fadeOut();
                if (svg.circ) svg.circ.final(1);
                let r = (x * x + y * y) / (2 * y);
                let c = svg.circ = svg.circle(r, [0, r], svg.conics).css(css);
                c.$.hide().fadeIn();                
                c = svg.measure.config({position: [-0.75, 2]}).update(0);
                c.$.html(`r = ${r.toPrecision(3)} cm`).fadeIn();
            }
        }
        else {
            svg.measure.$.fadeOut();
            svg.parab.$.fadeOut();
            if (svg.circ) svg.circ.$.fadeOut();
        }
    });

    svg.update(0);
    svg.final();
}

loadFeed.sim.ray = function*() {
    // Calculate cathode ray trajectory
    let e = $("#SimControls input");
    let Va = parseFloat($(e[0]).val());
    let Vd = parseFloat($(e[1]).val());
    let B = parseFloat($(e[2]).val()) / 1000;
    e = $("#SimControls tr td:nth-child(2)");
    $(e[0]).html(Va.toFixed(0) + " V");
    $(e[1]).html(Vd.toFixed(0) + " V");
    $(e[2]).html((1000 * B).toFixed(2) + " mT");
    let qm = 1.602e-19 / 9.11e-31, d = 0.06;

    let x = 0, y = 0, vy = 0, n = 25;
    let vx = root((2 * qm) * Va);
    let dt = 0.0001 / vx / n;
    let beam = true, i = 0;
    while (beam) {
        if ((i++) % n == 0) yield [100*x, 100*y];
        let dvy = dt * qm * (vx * B - Vd / d);
        let dvx = dt * (-qm * vy * B);
        if (x < 0 || x > 0.1) dvx = dvy = 0;
        x += dt * (vx + dvx / 2);
        y += dt * (vy + dvy / 2);
        vx += dvx;
        vy += dvy;
        beam = x <= 0.1 ? Math.abs(y) < d/2 : x <= 0.12;
    }
}

</script>
</section>

<section class="Post" data-icon="slides">
<h2 class="Collapse">Lesson Notes</h2>
<div id="LessonNotes" class="Collapse">

<section class="Slide Center">
<h1 id="Title">Thomson’s CRT Experiment</h1>
</section>


</div></section>

<section class="Post NoPrintIcon" data-show="2024.11.27.10" data-icon="gdrv">
    <h2 class="Collapse">Practice &amp; Review</h2><div class="Collapse">
    <p class="BtnGrid">
        <button data-icon="gdrv" data-gdrv="">Answer Key</button>
    </p>
</div></section>

<script type="text/javascript">

loadFeed.data = {
    title: `${siteData.lesson}15.1 — Thomson’s CRT Experiment`,
    answerDate: "2024.11.27.10",
    num: "15.1",
    up: "p30/units/D",
    prev: "p30/photon/rev",
    next: "p30/atom/model",
}

</script>